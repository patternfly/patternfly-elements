name: Release

on:
  push:
    branches:
      - main
      - master

jobs:
  release:
    # Prevents changesets action from creating a PR on forks
    if: github.repository == 'patternfly/patternfly-elements'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: npm

      - name: Install packages
        run: npm i --prefer-offline

      - name: Build
        id: build
        run: npm run build

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          publish: npx changeset publish
          commit: "chore: version packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Bundle
        id: bundle
        if: ${{ steps.changesets.outputs.published }}
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { URL, fileURLToPath } = require('url');
            const { readFile } = require('fs/promises');
            const { pfeBuild } = await import('${{ github.workspace }}/tools/pfe-tools/esbuild.js');
            const { execaCommand } = await import('execa');

            // https://github.com/patternfly/patternfly-elements
            const owner = 'patternfly';
            const repo = 'patternfly-elements';

            // repo root
            const cwd = '${{ github.workspace }}';
            const outfile = `${cwd}/pfe.min.js`;
            const mode = 'production';

            const result = await pfeBuild({ cwd, mode, outfile });

            // list of published packages from changesets
            const publishedPackages = JSON.parse('${{ steps.changesets.outputs.publishedPackages }}');

            for (const { name: packageName, version } of publishedPackages) {
              // get the tag for the release for this package
              const tag = `${packageName}@${version}`;
              const { id } = await github.rest.repos.getReleaseByTag({ owner, repo, tag });

              // make a tarball for the package
              // this was already published to npm in the changesets action
              const { stdout } = await execaCommand(`npm run pack -w ${name}`);
              const [name] = stdout.match(/^[\w-\.]+\.tgz$/g);

              const params = { name, owner, release_id: id, repo };

              // upload the bundle to each release
              await github.rest.repos.uploadReleaseAsset({ ...params, data: await readFile(outfile) });

              // upload the package tarball to the release
              if (name) {
                await github.rest.repos.uploadReleaseAsset({
                  ...params,
                  data: await readFile(`${cwd}/${name}`)
                });
              }
            }
