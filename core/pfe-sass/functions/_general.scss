@use "1-tools" as *;
@use "../maps/colors" as *;
@use "../maps/general" as *;
@use "../maps/broadcasted" as *;
@use "../maps/typography" as *;
@use "sass:map";

////
/// Private reference to the consuming stylesheet's '$LOCAL-VARIABLES' and '$LOCAL'
/// @see pfe-local
////
$-stylesheet-vars: (
  variables: (),
  name: null,
);

////
/// Set private references to the stylesheet's local variables
/// @see pfe-local
////
@mixin configure($variables: null, $name: null) {
  $-stylesheet-vars: map.merge($-stylesheet-vars, (
    variables: $variables or map.get($-stylesheet-vars, 'variables'),
    name: $name or map.get($-stylesheet-vars, 'name'),
  )) !global;
}

@function get-local-variables() {
  @return map.get($-stylesheet-vars, 'variables');
}

@function get-local-name() {
  @return map.get($-stylesheet-vars, 'name');
}

@function get-configuration() {
  @return $-stylesheet-vars;
}

@mixin merge-local-variables($new-variables: ()) {
  $-stylesheet-vars: map.deep-merge($-stylesheet-vars, (
    variables: map.deep-merge(get-local-variables(), $new-variables),
  )) !global;
}

/// Returns the value (only) of a property from the respective maps
/// Similar to pfe-var, but does not include css variable in the compiled CSS
/// @param {String} $name - Name of the key for the map
/// @param {String} $region - Identifies the region or slot to which this is assigned
/// @see $pfe-vars
/// @see $pfe-colors
/// @see $pfe-broadcasted
/// @example - scss - In your component styles
///   .my-element {
///     background-color: pfe-fetch( ui-base );
///   }
@function pfe-fetch($name, $region: null) {
  $var-name: to-string($name, "--");
  $-local: get-local-variables();
  @if $region != null and map.get($-local, $region, $var-name) != null {
      @return map.get($-local, $region, $var-name);
  }
  @else if $region == null and map.get($-local, $var-name) != null {
      @return map.get($-local, $var-name);
  }
  @else if map.get($pfe-vars, $var-name) != null {
      @return map.get($pfe-vars, $var-name);
  }
  @else if map.get($pfe-colors, $var-name) != null {
      @return map.get($pfe-colors, $var-name);
  }
  @else if map.get($pfe-broadcasted, $var-name) != null {
      @return map.get($pfe-broadcasted, $var-name);
  }
  @else if map.get($pfe-typography-base, $var-name) != null {
      @return map.get($pfe-typography-base, $var-name);
  }

  // PATTERNFLY CORE
  @else if map.get($pfe-type-sizing, $var-name) != null {
      @return map.get($pfe-type-sizing, $var-name);
  }
  @else if map.get($pfe-type-sizing--component, $var-name) != null {
      @return map.get($pfe-type-sizing--component, $var-name);
  }
  @else if map.get($pfe-type-sizing--modifiers, $var-name) != null {
      @return map.get($pfe-type-sizing--modifiers, $var-name);
  }
  @else if map.get($pfe-type-sizing--content, $var-name) != null {
      @return map.get($pfe-type-sizing--content, $var-name);
  }
  // DEPRECATED
  @else if map.get(typography_deprecated.$pfe-typography-base-deprecated, $var-name) != null {
      @return map.get(typography_deprecated.$pfe-typography-base-deprecated, $var-name);
  }
  @else if map.get($pfe-typography-deprecated, $var-name) != null {
      @return map.get($pfe-typography-deprecated, $var-name);
  }
  @else {
      @error "#{$var-name} could not be found.";
  }
}

/// Returns the SCSS breakpoint value only
///
/// Set $map to false if you need supplemental breakpoints in a component
/// @param {String} $size - Generally named breakpoint size to be called
/// @param {String} $max - Set to true if the provided size is the max-value
/// @example - scss
///   $LOCAL-VARIABLES: (
///      lg-mobile:         640,
///      sm-desktop:        1024,
///   );
/// @example - scss
///   @media screen and (min-width: pfe-breakpoint($size: lg-mobile, $map: false)) {}
/// @example - css
///   @media screen and (min-width: var(--pfe-navigation--breakpoint-lg-mobile, 640)) { }
/// @example - scss
///   @media screen and (min-width: pfe-breakpoint(sm)) {
///      --pfe-band--Width: #{pfe-breakpoint($size: sm) - 20px * 2};
///   }
/// @example - scss
///   @media screen and (max-width: pfe-breakpoint($size: md, $max: true)) {
///      --pfe-band--Width: #{pfe-breakpoint($size: sm) - 20px * 2};
///   }
@function pfe-breakpoint($size, $max: false, $map: true) {
  $bp: 1px;
  @if $map == true {
    $bp: pfe-fetch(grid-breakpoint--#{$size});
    @if $max {
      $bp: (pfe-strip-unit($bp) - 1) * 1px;
    }
  } @else {
    $bp: map.get(get-local-variables(), #{$size});
    @if $max {
      $bp: (pfe-strip-unit($bp) - 1) * 1px;
    }
  }
  @return $bp;
}

/// This utility function will return the correct context
/// when you pass it a variable from the $pfe-colors map
/// @example - scss - In your component
///   .my-custom-red-container {
///     --context: #{ pfe-get-context(surface--accent--context) };
///   }
/// @example - css - Rendered output
///   .my-custom-red-container {
///     --context: saturated;
///   }
@function pfe-get-context($context) {
  @return #{map.get($pfe-colors, $context)};
}
