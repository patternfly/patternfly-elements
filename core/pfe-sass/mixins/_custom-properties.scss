@use "../variables/1-definitions" as *;
@use "../maps/colors" as *;
@use "../functions/custom-properties" as *;
@use "../functions/general" as *;
@use "../functions/1-tools" as *;
@use "sass:map";
@use "sass:list";

@import "@patternfly/pfe-sass/extends/extends";

////
/// Tools for leveraging custom property stacks
/// @group custom-properties
/// @author castastrophe
////

/// This will print all the broadcast variables, and set the value to the context of your choosing, like on-dark or on-saturated.
/// @param {String} $context - Look up values from contexts, i.e. "light" or "saturated"
/// @param {List | String} $broadcast [$BROADCAST-VARS] -  Optionally specify only one broadcast variable instead of the whole set, i.e. "text"
/// @see $custom-prop-prefix
/// @see $BROADCAST-VARS
/// @example - scss - Usage in a container component, i.e. pfe-card
///    :host {
///      @include pfe-set-broadcast-context(dark);
///    }
/// @example - css - Rendered output
///   :host {
///     --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);
///     --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);
///     --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);
///     --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);
///     --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);
///     --pfe-broadcasted--link-decoration: none;
///     --pfe-broadcasted--link-decoration--hover: underline;
///     --pfe-broadcasted--link-decoration--focus: underline;
///     --pfe-broadcasted--link-decoration--visited: none;
///   }
///
@mixin pfe-set-broadcast-context($context, $broadcast: $BROADCAST-VARS) {
  @each $type in $broadcast {
    $list: ();
    $string: "";
    $context_string: "";
    $state: "";

    @if str-starts-with($type, "link") {
      $list: append($list, "#{$type}");

      @each $s in (hover, focus, visited) {
        $state: "--#{$s}";
        $string: "#{$type}#{$state}";

        @if not index($list, $string) {
          $list: append($list, "#{$type}#{$state}");
        }
      }
    } @else {
      @if not index($list, $string) {
        $list: append($list, "#{$type}");
      }
    }

    @if index($CONTEXTS, $context) != null {
      @if $context != "light" {
        $context_string: "--on-#{$context}";
      }
    }

    @each $item in $list {
      @if not index($BROADCAST-VARS, $type) {
        @warn "--#{$custom-prop-prefix}-broadcasted--#{$item} variable is not in the $BROADCAST-VARS list.";
      } @else if not pfe-broadcasted(#{$item}#{$context_string}) {
        @warn "#{$item}#{$context_string} value does not currently exist.";
      } @else {
        @if index($CONTEXTS, $context) != null {
          $var-name: "#{$item}#{$context_string}";
          --#{$custom-prop-prefix}-broadcasted--#{$item}: #{pfe-var($var-name)};
        } @else {
          @error "The #{$context} context does not appear to be part of a supported context.";
        }
      }
    }
  }
}

/// Returns CSS Variable for the local component-scoped variable
/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'
/// @param {String} $value - The value of the css variable being defined
/// @param {String} $region - Identifies the region or slot to which this is assigned
/// @see $custom-prop-prefix
/// @see $LOCAL
/// @example - scss
///   :host {
///       padding-top:      pfe-local(paddingTop);
///       padding-bottom:   pfe-local(paddingBottom);
///   }
@mixin pfe-print-local($map: ()) {
  @each $property, $value in $map {
    $component: get-local-name();
    $name: "--#{$property}";
    $styles: $value;

    @if type-of($value) == 'map' {
      @each $prop, $v in $value {
        $name: "__#{$property}--#{$prop}";
        $styles: $v;

        // Print the variable definition
        --#{$custom-prop-prefix}-#{$component}#{$name}: #{$styles};
      }
    } @else {
      // Print the variable definition
      --#{$custom-prop-prefix}-#{$component}#{$name}: #{$styles};
    }
  }
}

/// Surface properties
/// This mixin creates an attribute for all the surface colors, then prints the local background color variable for the component, with the correct context colors.
/// @param {List | String} $surfaces [$SURFACES] - defaults to the global $SURFACES list of all supported colors
/// @param {String} $attr-name [pfe-var] - defaults to pfe-var, optionally pass in a custom name for the data attribute
/// @example - scss - In your component stylesheet
///   $LOCAL: band;
///   @include pfe-surfaces;
/// @example - css - Rendered result
///   :host([color="darker"]) {
///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darker, #464646);
///     --context: dark;
///   }
///   :host([color="darkest"]) {
///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darkest, #131313);
///     --context: dark;
///   }
///   :host([color="base"]) {
///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--base, #dfdfdf);
///     --context: light;
///   }
///   :host([color="lighter"]) {
///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lighter, #ececec);
///     --context: light;
///   }
///   :host([color="lightest"]) {
///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lightest, #fff);
///     --context: light;
///   }
///   :host([color="accent"]) {
///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--accent, #ee0000);
///     --context: saturated;
///   }
///   :host([color="complement"]) {
///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--complement, #0477a4);
///     --context: saturated;
///   }
@mixin pfe-surfaces($surfaces: $SURFACE, $attr-name: color) {
  @each $color in $surfaces {
    $context: #{pfe-get-context(surface--#{$color}--context)};
    :host([#{$attr-name}="#{$color}"]) {
      @include pfe-print-local(
        (
          BackgroundColor: pfe-var(surface--#{$color}),
          context: pfe-var(surface--#{$color}--context, #{$context}),
        )
      );
    }
  }
}

/// Prints the `on` attribute
/// @param {List} contexts [$CONTEXTS] - defaults to the global $CONTEXTS list of all supported contexts
/// @example - scss - In your component styles
///   @include pfe-contexts; // imports on="light" etc support
/// @example - css - Rendered outputs
///   :host([on="dark"]) {
///     --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);
///     --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);
///     --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);
///     --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);
///     --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);
///     --pfe-broadcasted--link-decoration: none;
///     --pfe-broadcasted--link-decoration--hover: underline;
///     --pfe-broadcasted--link-decoration--focus: underline;
///     --pfe-broadcasted--link-decoration--visited: none;
///   }
///   @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */
///     :host([on="dark"]) {
///       color: #fff;
///       color: var(--pfe-theme--color--text--on-dark, #fff);
///     }
///   }
///   // ...as well as all the values for :host([on="saturated"])  and  :host([on="light"])
@mixin pfe-contexts($contexts: $CONTEXTS) {
  // Helper attributes to aid in theming

  :host([context="dark"]) { --context: dark; }
  :host([context="light"]) { --context: light; }
  :host([context="accent"]) { --context: saturated; }
  :host([context="saturated"]) { --context: saturated; }

  @each $context in $contexts {
    :host([on="#{$context}"]) {
      @include pfe-set-broadcast-context($context);
    }
  }
}
