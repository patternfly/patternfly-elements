{"version":3,"sources":["pfe-typography-deprecated.scss","../../pfe-sass/extends/_typography-deprecated.scss","../../pfe-sass/functions/_custom-properties.scss","pfe-typography-deprecated.css"],"names":[],"mappings":"AAIE;ECFE,wFCmCgC;EDnChC,gICmCgC;EDlChC,eCkCgC;EDlChC,kFCkCgC;EDjChC,gBCiCgC;EDjChC,+CCiCgC;EDhChC,gBCgCgC;EDhChC,sDCgCgC;AChCpC;;AHDE;ECGM,qBC8B4B;ED9B5B,oEC8B4B;AC5BpC;;AHLE;ECOE,wFC0BgC;ED1BhC,gIC0BgC;EDzBhC,eCyBgC;EDzBhC,iFCyBgC;EDxBhC,gBCwBgC;EDxBhC,+CCwBgC;EDvBhC,gBCuBgC;EDvBhC,sDCuBgC;ACrBpC;;AHZE;ECYM,qBCqB4B;EDrB5B,oECqB4B;ACjBpC;;AHhBE;ECgBE,wFCiBgC;EDjBhC,gICiBgC;EDhBhC,eCgBgC;EDhBhC,oFCgBgC;EDfhC,gBCegC;EDfhC,+CCegC;EDdhC,gBCcgC;EDdhC,uDCcgC;ACVpC;;AHvBE;ECqBM,mBCY4B;EDZ5B,kECY4B;ACNpC;;AH3BE;ECyBE,wFCQgC;EDRhC,gICQgC;EDPhC,eCOgC;EDPhC,mFCOgC;EDNhC,gBCMgC;EDNhC,+CCMgC;EDLhC,gBCKgC;EDLhC,uDCKgC;ACCpC;;AHlCE;EC8BM,mBCG4B;EDH5B,kECG4B;ACKpC;;AHtCE;ECkCE,wFCDgC;EDChC,gICDgC;EDEhC,eCFgC;EDEhC,mFCFgC;EDGhC,gBCHgC;EDGhC,+CCHgC;EDIhC,gBCJgC;EDIhC,uDCJgC;ACYpC;;AH7CE;ECuCM,mBCN4B;EDM5B,kECN4B;ACgBpC;;AHjDE;EC2CE,wFCVgC;EDUhC,gICVgC;EDWhC,eCXgC;EDWhC,mFCXgC;EDYhC,gBCZgC;EDYhC,+CCZgC;EDahC,gBCbgC;EDahC,uDCbgC;ACuBpC;;AHxDE;ECgDM,mBCf4B;EDe5B,kECf4B;AC2BpC;;AH5DE;ECoDE,wFCnBgC;EDmBhC,gICnBgC;EDoBhC,eCpBgC;EDoBhC,qFCpBgC;EDqBhC,gBCrBgC;EDqBhC,+CCrBgC;EDsBhC,gBCtBgC;EDsBhC,uDCtBgC;ACkCpC;;AHnEE;ECyDM,mBCxB4B;EDwB5B,kECxB4B;ACsCpC;;AHvEE;EC6DE,wFC5BgC;ED4BhC,gIC5BgC;ED6BhC,eC7BgC;ED6BhC,kFC7BgC;ED8BhC,gBC9BgC;ED8BhC,+CC9BgC;ED+BhC,gBC/BgC;ED+BhC,uDC/BgC;AC6CpC;;AH9EE;ECkEM,mBCjC4B;EDiC5B,kECjC4B;ACiDpC;;AH5EA;ECkEI,kFCvCgC;EDuChC,iHCvCgC;EDwChC,eCxCgC;EDwChC,wFCxCgC;EDyChC,gBCzCgC;EDyChC,+CCzCgC;ED0ChC,gBC1CgC;ED0ChC,sDC1CgC;ACwDpC;;AHnFA;ECuEQ,mBC5C4B;ED4C5B,+DC5C4B;AC4DpC;;AHpFA;;ECyEI,kFCjDgC;EDiDhC,iHCjDgC;EDkDhC,eClDgC;EDkDhC,qFClDgC;EDmDhC,gBCnDgC;EDmDhC,+CCnDgC;EDoDhC,gBCpDgC;EDoDhC,sDCpDgC;ACoEpC;;AH5FA;;EC8EQ,mBCtD4B;EDsD5B,+DCtD4B;ACyEpC;;AH7FA;EC+EI,kFC3DgC;ED2DhC,iHC3DgC;ED4DhC,eC5DgC;ED4DhC,wFC5DgC;ED6DhC,gBC7DgC;ED6DhC,+CC7DgC;ED8DhC,gBC9DgC;ED8DhC,sDC9DgC;ACgFpC;;AHpGA;ECoFQ,mBChE4B;EDgE5B,+DChE4B;ACoFpC;;AHrGA;ECsFI,kFCrEgC;EDqEhC,iHCrEgC;EDsEhC,eCtEgC;EDsEhC,wFCtEgC;EDuEhC,gBCvEgC;EDuEhC,+CCvEgC;EDwEhC,gBCxEgC;EDwEhC,sDCxEgC;AC2FpC;;AH5GA;EC2FQ,mBC1E4B;ED0E5B,+DC1E4B;AC+FpC","file":"pfe-typography-deprecated.css","sourcesContent":["@import \"../../pfe-sass/pfe-sass\";\n\n// Deprecated header classes\n@each $size in (xxl, xl, alpha, beta, gamma, delta, epsilon, zeta) {\n  .pfe-headline-#{$size}  {\n      @extend %pfe-headline-#{$size}; \n  }\n}\n \n// TEXT\n.pfe-text-lg {\n    @extend %pfe-text-lg;\n}\n.pfe-text-md,\n.pfe-text {\n    @extend %pfe-text;\n}\n.pfe-text-sm {\n    @extend %pfe-text-sm;\n}\n.pfe-text-xs {\n    @extend %pfe-text-xs;\n}  \n","// Deprecated header classes\n%pfe-headline-xxl  {\n    font-family: pfe-var(font-family--heading);\n    font-size:   pfe-var(font-size--xxl);  \n    line-height: pfe-var(line-height);\n    font-weight: pfe-var(font-weight--light);\n    &:not(:last-child) {\n        margin-bottom: pfe-var(content-spacer--heading--md);\n    }\n}\n%pfe-headline-xl  {\n    font-family: pfe-var(font-family--heading);\n    font-size:   pfe-var(font-size--xl);  \n    line-height: pfe-var(line-height);\n    font-weight: pfe-var(font-weight--light);\n    &:not(:last-child) {\n        margin-bottom: pfe-var(content-spacer--heading--md);\n    }\n}\n%pfe-headline-alpha {\n    font-family: pfe-var(font-family--heading);\n    font-size:   pfe-var(font-size--alpha);  \n    line-height: pfe-var(line-height);\n    font-weight: pfe-var(font-weight--normal);\n    &:not(:last-child) {\n        margin-bottom: pfe-var(content-spacer--heading--sm);\n    }\n}\n%pfe-headline-beta {\n    font-family: pfe-var(font-family--heading);\n    font-size:   pfe-var(font-size--beta);  \n    line-height: pfe-var(line-height);\n    font-weight: pfe-var(font-weight--normal);\n    &:not(:last-child) {\n        margin-bottom: pfe-var(content-spacer--heading--sm);\n    }\n}\n%pfe-headline-gamma { \n    font-family: pfe-var(font-family--heading);\n    font-size:   pfe-var(font-size--gamma);  \n    line-height: pfe-var(line-height);\n    font-weight: pfe-var(font-weight--normal);\n    &:not(:last-child) {\n        margin-bottom: pfe-var(content-spacer--heading--sm);\n    }\n}\n%pfe-headline-delta  { \n    font-family: pfe-var(font-family--heading);\n    font-size:   pfe-var(font-size--delta); \n    line-height: pfe-var(line-height);\n    font-weight: pfe-var(font-weight--normal);\n    &:not(:last-child) {\n        margin-bottom: pfe-var(content-spacer--heading--sm);\n    }\n}\n%pfe-headline-epsilon { \n    font-family: pfe-var(font-family--heading);\n    font-size:   pfe-var(font-size--epsilon); \n    line-height: pfe-var(line-height);\n    font-weight: pfe-var(font-weight--normal);\n    &:not(:last-child) {\n        margin-bottom: pfe-var(content-spacer--heading--sm);\n    }\n}\n%pfe-headline-zeta { \n    font-family: pfe-var(font-family--heading);\n    font-size:   pfe-var(font-size--zeta); \n    line-height: pfe-var(line-height);\n    font-weight: pfe-var(font-weight--normal);\n    &:not(:last-child) {\n        margin-bottom: pfe-var(content-spacer--heading--sm);\n    }\n}\n\n// Naming of these reflects old naming conventions\n%pfe-text-lg {\n    font-family: pfe-var(font-family);\n    font-size:   pfe-var(font-size--default-lg);\n    line-height: pfe-var(line-height);\n    font-weight: pfe-var(font-weight--light);\n    &:not(:last-child) {\n        margin-bottom: pfe-var(content-spacer--body--md);\n    }\n}\n\n%pfe-text {\n    font-family: pfe-var(font-family);\n    font-size:   pfe-var(font-size--default); //--pfe-theme--font-size--default-md doesnt exist in rh theme\n    line-height: pfe-var(line-height);\n    font-weight: pfe-var(font-weight--light);\n    &:not(:last-child):not(:empty) {\n        margin-bottom: pfe-var(content-spacer--body--md);\n    }\n}\n\n%pfe-text-sm {\n    font-family: pfe-var(font-family);\n    font-size:   pfe-var(font-size--default-sm);\n    line-height: pfe-var(line-height);\n    font-weight: pfe-var(font-weight--light);\n    &:not(:last-child) {\n        margin-bottom: pfe-var(content-spacer--body--md);\n    }\n}\n\n%pfe-text-xs {\n    font-family: pfe-var(font-family);\n    font-size:   pfe-var(font-size--default-xs);\n    line-height: pfe-var(line-height);\n    font-weight: pfe-var(font-weight--light);\n    &:not(:last-child) {\n        margin-bottom: pfe-var(content-spacer--body--md);\n    }\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex\n/// @param {String} $category  - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map  - Sass map of variables\n/// @param {String} $fallback [null]  - Optional fallback override\n/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value\n/// @requires $custom-prop-prefix\n/// @return {String} theme stack with fallback value from a sass map\n@function pfe-get-from-map($category, $key, $map, $fallback: null, $prefix: \"#{$custom-prop-prefix}-theme\", $use-fallback: true) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$prefix}--\";\n    @if $prefix == \"pf-c\" {\n        $var-declaration: \"--#{$prefix}-\";  // one dash at the end\n    }\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $use-fallback and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n\n\n/// Returns CSS Var for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example\n///   :host {\n///       padding-top:      #{pfe-local(paddingTop)};\n///       padding-bottom:   #{pfe-local(paddingBottom)};\n///   }\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$custom-prop-prefix}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context\n/// to influence the styles of children elements such as p tags or links.\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $custom-prop-prefix - Name of repo, which is \"pfe\"\n/// @example - scss\n///   :host {\n///     color: pfe-broadcasted(link);\n///   }\n/// @example - css\n///   :host {\n///     color: var(--pfe-broadcasted--link, #06c);\n///   }\n@function pfe-broadcasted($broadcast, $use-fallback: true) {\n    $fallback: \"\";\n    @if $use-fallback {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\t\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$custom-prop-prefix}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$custom-prop-prefix}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @see $pfe-zindex\n/// @example - scss - In your component styles\n///   .my-element {\n///     z-index: pfe-zindex( content );\n///   }\n\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n/// @param {String} $name - Name of the key for the map\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example - scss - In your component styles\n///   .my-element {\n///     background-color: pfe-fetch( ui-base );\n///   }\n@function pfe-fetch($name, $region: null) {\n    $var-name: to-string($name, \"--\");\n    @if $region != null and map-deep-get($LOCAL-VARIABLES, $region, $var-name) != null {\n        @return map-deep-get($LOCAL-VARIABLES, $region, $var-name);\n    }\n    @else if $region == null and map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @else if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return map-get($pfe-typography-base, $var-name);\n    }\n\n    // PATTERNFLY CORE\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return map-get($pf-type-sizing, $var-name);\n    }\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return map-get($pf-type-sizing--component, $var-name);\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return map-get($pf-type-sizing--modifers, $var-name);\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return map-get($pf-type-sizing--content, $var-name);\n    }\n    // DEPRECATED\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-base-deprecated, $var-name);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-deprecated, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example scss - In your component styles\n///   .my-element {\n///     padding:     pfe-var( container-spacer );\n///     font-size:   pfe-var( font-size );\n///   }\n/// @example - css Rendered output\n///   .my-element {\n///      padding: var(--pfe-theme--container-spacer, 16px);\n///      font-size: var(--pfe-theme--font-size, 16px);\n///   }\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base, $fallback);\n    }\n    // PATTERNFLY CORE:\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing, $fallback, $prefix: \"pf-global\");\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--modifers, $fallback, $prefix: \"pf-c\");\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--content, $fallback, $prefix: \"pf-c\");\n    }\n    // PFE components (must be below core)\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--component, $fallback);\n    }\n\n    // DEPRECATED:\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base-deprecated, $fallback);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-deprecated, $fallback);\n    }\n\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}",".pfe-headline-xxl {\n  font-family: var(--pfe-theme--font-family--heading, \"Red Hat Display\", \"RedHatDisplay\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-size: var(--pfe-theme--font-size--xxl, var(--pf-global--FontSize--5xl, 40px));\n  line-height: var(--pfe-theme--line-height, 1.5);\n  font-weight: var(--pfe-theme--font-weight--light, 300);\n}\n\n.pfe-headline-xxl:not(:last-child) {\n  margin-bottom: var(--pfe-theme--content-spacer--heading--md, 1.5rem);\n}\n\n.pfe-headline-xl {\n  font-family: var(--pfe-theme--font-family--heading, \"Red Hat Display\", \"RedHatDisplay\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-size: var(--pfe-theme--font-size--xl, var(--pf-global--FontSize--4xl, 36px));\n  line-height: var(--pfe-theme--line-height, 1.5);\n  font-weight: var(--pfe-theme--font-weight--light, 300);\n}\n\n.pfe-headline-xl:not(:last-child) {\n  margin-bottom: var(--pfe-theme--content-spacer--heading--md, 1.5rem);\n}\n\n.pfe-headline-alpha {\n  font-family: var(--pfe-theme--font-family--heading, \"Red Hat Display\", \"RedHatDisplay\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-size: var(--pfe-theme--font-size--alpha, var(--pf-global--FontSize--3xl, 28px));\n  line-height: var(--pfe-theme--line-height, 1.5);\n  font-weight: var(--pfe-theme--font-weight--normal, 400);\n}\n\n.pfe-headline-alpha:not(:last-child) {\n  margin-bottom: var(--pfe-theme--content-spacer--heading--sm, 1rem);\n}\n\n.pfe-headline-beta {\n  font-family: var(--pfe-theme--font-family--heading, \"Red Hat Display\", \"RedHatDisplay\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-size: var(--pfe-theme--font-size--beta, var(--pf-global--FontSize--2xl, 24px));\n  line-height: var(--pfe-theme--line-height, 1.5);\n  font-weight: var(--pfe-theme--font-weight--normal, 400);\n}\n\n.pfe-headline-beta:not(:last-child) {\n  margin-bottom: var(--pfe-theme--content-spacer--heading--sm, 1rem);\n}\n\n.pfe-headline-gamma {\n  font-family: var(--pfe-theme--font-family--heading, \"Red Hat Display\", \"RedHatDisplay\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-size: var(--pfe-theme--font-size--gamma, var(--pf-global--FontSize--xl, 20px));\n  line-height: var(--pfe-theme--line-height, 1.5);\n  font-weight: var(--pfe-theme--font-weight--normal, 400);\n}\n\n.pfe-headline-gamma:not(:last-child) {\n  margin-bottom: var(--pfe-theme--content-spacer--heading--sm, 1rem);\n}\n\n.pfe-headline-delta {\n  font-family: var(--pfe-theme--font-family--heading, \"Red Hat Display\", \"RedHatDisplay\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-size: var(--pfe-theme--font-size--delta, var(--pf-global--FontSize--lg, 18px));\n  line-height: var(--pfe-theme--line-height, 1.5);\n  font-weight: var(--pfe-theme--font-weight--normal, 400);\n}\n\n.pfe-headline-delta:not(:last-child) {\n  margin-bottom: var(--pfe-theme--content-spacer--heading--sm, 1rem);\n}\n\n.pfe-headline-epsilon {\n  font-family: var(--pfe-theme--font-family--heading, \"Red Hat Display\", \"RedHatDisplay\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-size: var(--pfe-theme--font-size--epsilon, var(--pf-global--FontSize--md, 16px));\n  line-height: var(--pfe-theme--line-height, 1.5);\n  font-weight: var(--pfe-theme--font-weight--normal, 400);\n}\n\n.pfe-headline-epsilon:not(:last-child) {\n  margin-bottom: var(--pfe-theme--content-spacer--heading--sm, 1rem);\n}\n\n.pfe-headline-zeta {\n  font-family: var(--pfe-theme--font-family--heading, \"Red Hat Display\", \"RedHatDisplay\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-size: var(--pfe-theme--font-size--zeta, var(--pf-global--FontSize--sm, 14px));\n  line-height: var(--pfe-theme--line-height, 1.5);\n  font-weight: var(--pfe-theme--font-weight--normal, 400);\n}\n\n.pfe-headline-zeta:not(:last-child) {\n  margin-bottom: var(--pfe-theme--content-spacer--heading--sm, 1rem);\n}\n\n.pfe-text-lg {\n  font-family: var(--pfe-theme--font-family, \"Red Hat Text\", \"RedHatText\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-size: var(--pfe-theme--font-size--default-lg, var(--pf-global--FontSize--xl, 20px));\n  line-height: var(--pfe-theme--line-height, 1.5);\n  font-weight: var(--pfe-theme--font-weight--light, 300);\n}\n\n.pfe-text-lg:not(:last-child) {\n  margin-bottom: var(--pfe-theme--content-spacer--body--md, 1rem);\n}\n\n.pfe-text-md,\n.pfe-text {\n  font-family: var(--pfe-theme--font-family, \"Red Hat Text\", \"RedHatText\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-size: var(--pfe-theme--font-size--default, var(--pf-global--FontSize--lg, 18px));\n  line-height: var(--pfe-theme--line-height, 1.5);\n  font-weight: var(--pfe-theme--font-weight--light, 300);\n}\n\n.pfe-text-md:not(:last-child):not(:empty),\n.pfe-text:not(:last-child):not(:empty) {\n  margin-bottom: var(--pfe-theme--content-spacer--body--md, 1rem);\n}\n\n.pfe-text-sm {\n  font-family: var(--pfe-theme--font-family, \"Red Hat Text\", \"RedHatText\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-size: var(--pfe-theme--font-size--default-sm, var(--pf-global--FontSize--md, 16px));\n  line-height: var(--pfe-theme--line-height, 1.5);\n  font-weight: var(--pfe-theme--font-weight--light, 300);\n}\n\n.pfe-text-sm:not(:last-child) {\n  margin-bottom: var(--pfe-theme--content-spacer--body--md, 1rem);\n}\n\n.pfe-text-xs {\n  font-family: var(--pfe-theme--font-family, \"Red Hat Text\", \"RedHatText\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-size: var(--pfe-theme--font-size--default-xs, var(--pf-global--FontSize--sm, 14px));\n  line-height: var(--pfe-theme--line-height, 1.5);\n  font-weight: var(--pfe-theme--font-weight--light, 300);\n}\n\n.pfe-text-xs:not(:last-child) {\n  margin-bottom: var(--pfe-theme--content-spacer--body--md, 1rem);\n}\n"],"sourceRoot":"../src"}