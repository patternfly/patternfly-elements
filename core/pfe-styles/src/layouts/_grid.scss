@use "@patternfly/pfe-sass" as *;
@use "sass:math";

// Grid Layout

/// ===========================================================================
/// Component Specific SASS Vars
/// ===========================================================================

$breakpoints: (
  "": null,
  "xs": "-on-xs",
  "sm": "-on-sm",
  "md": "-on-md",
  "lg": "-on-lg",
  "xl": "-on-xl",
  "xxl": "-on-xxl"
);

$grid-gap-horizontal: var(--pfe-grid--gap--horizontal, var(--pfe-grid--gap, #{pfe-var(container-spacer)}));
$grid-gap-vertical: var(--pfe-grid--gap--vertical, var(--pfe-grid--gap, #{pfe-var(container-spacer)}));

$half-grid-gap-horizontal: calc(#{$grid-gap-horizontal} / 2);
$half-grid-gap-vertical: calc(#{$grid-gap-vertical} / 2);

/// ===========================================================================
/// Media Queries for Grid
/// ===========================================================================

/// Media query used to create responsive grid items
/// @group layout
/// @parameter {Point} xs, sm, md, lg, xl, xxl null
@mixin GridMediaQuery($point) {
  @if $point == "xs" {
    @media screen and (max-width: pfe-breakpoint(xs)) {
      @content;
    }
  } @else if $point == "sm" or $point == "" or $point == null {
    @media screen and (min-width: pfe-breakpoint(sm)) {
      @content;
    }
  } @else if $point == "md" {
    @media screen and (min-width: pfe-breakpoint(md)) {
      @content;
    }
  } @else if $point == "lg" {
    @media screen and (min-width: pfe-breakpoint(lg)) {
      @content;
    }
  } @else if $point == "xl" {
    @media screen and (min-width: pfe-breakpoint(xl)) {
      @content;
    }
  } @else if $point == "xxl" {
    @media screen and (min-width: pfe-breakpoint(xl)) {
      @content;
    }
  }
}

/// Creates flexbox item
/// @group layout
/// @parameter {Suffix} xs, sm, md, lg, xl, xxl, null
@mixin FlexItemModifiers($suffix: null) {
  // generate column span modifiers
  @for $col-num from 1 through 12 {
    > .pfe-m-#{$col-num}-col#{$suffix} {
      $this-size: math.div($col-num, 12) * 100%;
      width: calc(#{$this-size} - #{$grid-gap-horizontal});
    }
  }

  // Start-at and row-span aren't available in fallbacks.
}

/// Creates grid item
/// @group layout
/// @parameter {Suffix} xs, sm, md, lg, xl, xxl, null
@mixin GridItemModifiers($suffix: null) {
  // generate column span modifiers
  @for $col-num from 1 through 12 {
    > .pfe-m-#{$col-num}-col#{$suffix} {
      width: auto; // Remove IE11
      grid-column-start: auto;
      grid-column-end: span $col-num;
    }
  }

  // generate column startat modfiers
  @for $col-num from 1 through 12 {
    > .pfe-m-startat-#{$col-num}-col#{$suffix} {
      grid-column-start: col-start ($col-num); // removed +1 so it's value is literal.
    }
  }

  // generate row span modfiers
  @for $row-num from 1 through 12 {
    > .pfe-m-#{$row-num}-row#{$suffix} {
      grid-row: span $row-num;
    }
  }
}

@mixin FlexAllModifiers($suffix: null) {
  @for $col-num from 1 through 12 {
    &.pfe-m-all-#{$col-num}-col#{$suffix} {
      > * {
        $this-size: math.div($col-num, 12) * 100%;
        width: calc(#{$this-size} - #{$grid-gap-horizontal});
      }
    }
  }
}

@mixin GridAllModifiers($suffix: null) {
  @for $col-num from 1 through 12 {
    &.pfe-m-all-#{$col-num}-col#{$suffix} {
      > * {
        width: auto; // Remove IE11
        grid-column-start: auto;
        grid-column-end: span $col-num;
      }
    }
  }
}

/// ===========================================================================
/// Flexbox for IE11 support
/// ===========================================================================
.pfe-l-grid {
  box-sizing: border-box;
  display: flex;
  flex-wrap: wrap;

  > *,
  &__item {
    box-sizing: border-box;
    width: 100%;
    margin: 0 auto;
  }

  // Loop through $breakpoints map to generate responsive classes
  @each $breakpoint, $value in $breakpoints {
    @include GridMediaQuery($breakpoint) {
      @include FlexAllModifiers($value);
      @include FlexItemModifiers($value);
    }
  }

  &.pfe-m-gutters {
    margin-top: calc(#{$half-grid-gap-vertical} * -1);
    margin-bottom: calc(#{$half-grid-gap-vertical} * -1);

    margin-left: calc(#{$half-grid-gap-horizontal} * -1);
    margin-right: calc(#{$half-grid-gap-horizontal} * -1);

    & > * {
      margin-top: $half-grid-gap-vertical;
      margin-bottom: $half-grid-gap-vertical;

      margin-left: $half-grid-gap-horizontal;
      margin-right: $half-grid-gap-horizontal;
    }
  }
}

/// ===========================================================================
/// Grid for Smarter Browsers
/// ===========================================================================

@supports (display: grid) {
  .pfe-l-grid {
    display: grid;
    grid-template-columns: repeat(12, [col-start] 1fr);

    > *,
    &__item {
      width: auto; // Remove IE11
      margin: 0; // Remove IE11
      grid-column-start: auto;
      grid-column-end: span 12;
    }

    &.pfe-l-grid-fill-height {
      height: 100%;
    }

    // Loop through $breakpoints map to generate responsive classes
    @each $breakpoint, $value in $breakpoints {
      @include GridMediaQuery($breakpoint) {
        @include GridAllModifiers($value);
        @include GridItemModifiers($value);
      }
    }

    &.pfe-m-gutters {
      column-gap: #{$grid-gap-horizontal};
      row-gap: #{$grid-gap-vertical};
      // design hook to customize the margin of the progressively
      // enhanced grid. Note, these design hooks will not work in the IE11 code above
      // since it is using the negative margin technique to mimic grids.
      margin: var(--pfe-grid--Margin, 0); // Remove IE11

      & > * {
        // design hook to customize the margin of the progressively
        // enhanced grid. Note, these design hooks will not work in the IE11 code above
        // since it is using the negative margin technique to mimic grids.
        margin: var(--pfe-grid__item--Margin, 0); // Remove IE11
      }
    }
  }
}
