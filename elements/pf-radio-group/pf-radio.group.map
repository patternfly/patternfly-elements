{"version":3,"file":"pf-radio-group.js","sourceRoot":"","sources":["pf-radio-group.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, type TemplateResult } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport styles from './pf-radio-group.css';\n\nexport class PFRadioGroupChangeEvent extends Event {\n  constructor(public event: Event, public value: string) {\n    super('change', { bubbles: true });\n  }\n}\n\n/**\n * Radio\n * @slot - Place element content here\n */\n@customElement('pf-radio-group')\nexport class PFRadioGroup extends LitElement {\n  static readonly styles: CSSStyleSheet[] = [styles];\n\n  static formAssociated = true;\n  static shadowRootOptions: ShadowRootInit = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  @property({ type: Boolean, reflect: true })\n  checked = false;\n\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  @property({ reflect: true }) name = '';\n\n  @property({ reflect: true }) label?: string;\n\n  @property({ reflect: true }) value = '';\n\n  connectedCallback(): void {\n    super.connectedCallback();\n    this.addEventListener('click', this.#onClick);\n    this.#createRadioButton(this.name, this.value, this.checked, this.label);\n  }\n\n  #createRadioButton(name: string, value: string, checked: boolean, labelText?: string) {\n    // Generate a unique ID for the radio button\n    const uniqueId = Math.random().toString(36).substring(2, 15);\n\n    // Create the input (radio) element\n    const radioInput = document.createElement('input');\n    radioInput.type = 'radio';\n    radioInput.name = name;\n    radioInput.value = value;\n    radioInput.id = `radio${uniqueId}`; // Unique ID for the radio button\n    radioInput.checked = checked;\n\n    // Create the label element\n    const label = document.createElement('label');\n    label.setAttribute('for', radioInput.id); // Link label to radio button\n    label.textContent = labelText || ''; // Set label text (default to empty if not provided)\n\n    // Append the input and label\n    this.appendChild(radioInput);\n    this.appendChild(label);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n  }\n\n  #onClick(event: MouseEvent) {\n    this.dispatchEvent(new PFRadioGroupChangeEvent(event, this.value));\n  }\n\n  render(): TemplateResult<1> {\n    return html`\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'pf-radio-group': PFRadioGroup;\n  }\n}\n"]}