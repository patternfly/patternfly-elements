@use "@patternfly/pfe-sass" as *;

// TODO: pass this as a shared stylesheet object
@use "shared-assets" as *;

@use "@patternfly/pfe-sass/extends/extends";

// Then layer the shared assets over it
// @import "shared-assets";

/// ===========================================================================
/// ACCORDION PANEL
/// Styles sourced from: @patternfly/patternfly/components/Accordion/accordion.scss
/// then updated for pfe theming variables
/// ===========================================================================

:host {
  @include pfe-box-sizing;
  display: none;
  overflow: hidden;
  will-change: height;
  border-color: transparent;
  opacity: 0;
    
  // relative prevents the left border overflow
  position: relative;
  box-sizing: border-box;

  width: 100%;
  z-index: 0;

  margin: 0;
  padding: 0;

  // background-color: pfe-local(BackgroundColor, transparent);
  color: pfe-local(Color);
  box-shadow: pfe-local(BoxShadow);
  box-sizing: border-box;

  // Border settings
  border-style: pfe-var(surface--border-style);
  border-color: pfe-local(BorderColor);
  border-width: pfe-local(BorderWidth);

  // No visible top border on the panel is necessary
  border-top-width: 0;
  border-bottom-width: 0;

  // Allows the headers to sit flush against each other
  // margin-bottom: calc(-1 * #{pfe-local(BorderWidth)});

  ::slotted(*) {
    // Ensure the box shadow does not propagate to nested accordions
    --pfe-accordion--BoxShadow: none;
  }

  // Accent bar
  &::after {
    @include accent-bar(
      $direction: vertical,
      $offset: (
        bottom: calc(-1 * #{pfe-local(BorderWidth)}),
        left: calc(-1 * #{pfe-local(BorderWidth)})
      ),
      $thickness: pfe-local(accent--width),
      $color: pfe-local(accent) // defaults to transparent
    );
    z-index: calc(#{pfe-local(ZIndex)} + 1);
  }
}

.pf-c-accordion__expanded-content {
  position: relative;
  display: block;
  width: 100%;
  padding: pfe-var(container-spacer);

  @include pfe-clearfix;

  // Note: inline-block is important for accomodating for inline
  // margin-top values inside the default slot
  display: inline-block;

  padding: pfe-local(Padding);

  :host([disclosure="true"]) & {
    padding: pfe-local(
      Padding,
      $region: panel-container,
      $fallback:
        0
        calc(#{pfe-var(container-padding)} * 3)
        calc(#{pfe-var(container-padding)})
        calc(#{pfe-var(container-padding)} * 1.5)
    );
  }

  // Allow opt-out of panel max-width via attribute or CSS variable
  :host(:not([full-width])) & {
    max-width: pfe-local(MaxWidth--content);
  }
}

/// ===========================================================================
/// EXPANDED STYLES
/// ===========================================================================

// Set the left border to blue during animation to prevent flicker
// from overflow change
:host(.animating) {
  border-left-color: pfe-local(accent);
  opacity: 1;
}

:host(.animating[hidden]),
:host([expanded]:not(.animating)) {
  margin-bottom: 0;
  border-bottom-width: pfe-local(BorderWidth);
  display: block !important;
  position: relative;
  opacity: 1;
}

:host([expanded]:not(.animating)) {
  overflow: visible;
}

// Create a smoother appearance for the shadow and added borders
:host {
    transition-property: box-shadow, border;
    transition-timing-function: pfe-var(animation-timing);
    transition-duration: calc(pfe-var(animation-speed) / 2);
}

:host([expanded]),
:host(.animating) {
    --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--expanded)};
    --pfe-accordion--Color:           #{pfe-local(Color--expanded)};
    --pfe-accordion--accent:          #{pfe-local(accent--expanded)};
}

// Add this after animation is complete (looks odd during transition)
:host([expanded]:not(.animating)) {
    --pfe-accordion--BoxShadow: #{pfe-local(BoxShadow--expanded)};
}

@each $context in (dark, saturated) {
    $overlay: rgba(247, 247, 249, .1);

    @if $context==saturated {
        $overlay: rgba(0, 0, 0, .2);
    }

    // Set properties to use their active modifier
    :host([on="#{$context}"][expanded]),
    :host([on="#{$context}"].animating) {
        --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--expanded, $overlay)};
        --pfe-accordion--Color:           #{pfe-local(Color--expanded, pfe-broadcasted(text--on-#{$context}))};
        --pfe-accordion--accent:          #{pfe-local(accent--expanded, pfe-var(ui-accent--on-#{$context}))};
    }

    :host([expanded]:not(.animating)) {
        --pfe-accordion--BoxShadow: #{pfe-local(BoxShadow--expanded, none)};
    }
}
