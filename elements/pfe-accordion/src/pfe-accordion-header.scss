@import "shared-assets";

/// ===========================================================================
/// ACCORDION HEADER
/// Styles sourced from: @patternfly/patternfly/components/Accordion/accordion.scss
/// then updated for pfe theming variables
/// ===========================================================================

:host {
  @include pfe-hidden;
  @include pfe-box-sizing;
  
  position: relative;
  display: block;
  outline: none;

  // Set the chevron to use the same color as the text
  --pfe-icon--color: #{pfe-local(Color)};

  &,
  .pf-c-accordion__toggle-text,
  .pf-c-accordion__toggle-icon {
    font-family:  pfe-var(font-family--heading);
    font-size:    pfe-local(FontSize--header);
    font-weight:  pfe-local(FontWeight--header);
    text-align:   pfe-local(TextAlign);
    line-height:  pfe-var(line-height);
  }
}

:host([disclosure]:not([disclosure="false"])) {
  &,
  .pf-c-accordion__toggle-text,
  .pf-c-accordion__toggle-icon {
    font-family:  pfe-var(font-family);
    font-size:    pfe-local(FontSize--header, $fallback: pfe-var(FontSize--md));
    font-weight:  pfe-local(FontWeight--header, $fallback: pfe-var(font-weight--normal));
  }
}

:host([expanded]),
:host(.animating) {
  --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--expanded)};
  --pfe-accordion--Color:           #{pfe-local(Color--expanded)};
  --pfe-accordion--accent:          #{pfe-local(accent--expanded)};

  box-shadow: pfe-local(BoxShadow);

  .pf-c-accordion__toggle {
    // Bump the left margin to allow the accent sit flush
    margin-left: calc(-1 * #{pfe-local(BorderWidth)});
    width: calc(100% + #{pfe-local(BorderWidth)});
  }
  .pf-c-accordion__toggle-wrapper {
    padding-left: pfe-local(BorderWidth);
  }
}

:host([expanded]:not([on="light"])),
:host(.animating:not([on="light"])) {
  box-shadow: none;
}

@each $context in (dark, saturated) {
  $overlay: rgba(247, 247, 249, .1);

  @if $context == saturated {
    $overlay: rgba(0, 0, 0, .2);
  }

  // Set properties to use their expanded modifier
  :host([on="#{$context}"][expanded]),
  :host([on="#{$context}"].animating) {
    --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--expanded, $overlay)};
    --pfe-accordion--Color:           #{pfe-local(Color--expanded, pfe-broadcasted(text--on-#{$context}))};
    --pfe-accordion--accent:          #{pfe-local(accent--expanded, pfe-var(ui-accent--on-#{$context}))};
  }
}

// Remove margins from the heading tag
#heading {
  margin: 0;
}

// Button element
.pf-c-accordion__toggle {
  cursor: pointer;

  // This is handled by the ::before pseudo element
  outline: none;

  width: 100%;

  margin: 0;
  padding:          pfe-local(Padding);
  background-color: pfe-local(BackgroundColor); // transparent
  color:            pfe-local(Color); // broadcasted text

  // @TODO: Do we want to force dark background color in dark mode or rely on the wrapper
  // @media (prefers-color-scheme: dark) {
  //   --context: dark;
  //   background-color: pfe-local(BackgroundColor, $fallback: pfe-var(surface--darker)); // transparent
  //   color:            pfe-local(Color, $fallback: pfe-var(text--on-dark)); // broadcasted text
  // }

  // Force IE11 to use white to prevent content from being un-readable
  @include browser-query(ie11) {
    background-color: pfe-fetch(surface--lightest) !important;
    color: pfe-fetch(text) !important;
  }

  border-style: pfe-var(surface--border-style);
  border-width: pfe-local(BorderWidth);
  border-color: pfe-local(BorderColor);
  
  // Default accordion uses transparent right & left borders
  border-right-color: transparent;
  border-left-color: transparent;

  :host(:not(:first-of-type)) & {
    border-top-width: 0;
  }

  // &:focus,
  // &:focus-visible {
  //   outline: none;
  // }

  // Keyboard focus state; cannot use outline because of border overlays
  &::before {
    position: absolute;
    top: -2px;
    left: -2px;
    width: calc(100% + 4px);
    height: calc(100% + 4px);
    content: "";
    background-color: transparent;
    z-index: calc(#{pfe-local(ZIndex)} + 3);
  }

  // Focus circle, must be done using a pseudo-element because it needs to overlap the accent bar
  // and overflow the button container, outline also does not support border-radius settings
  &:focus::before {
    border: pfe-var(ui--border-width--md) pfe-var(ui--border-style) pfe-broadcasted(link--focus);
    border-color: #6b9ff0; // @TODO: Where should this live in our kit?
    border-radius: pfe-var(ui--border-radius);
  }

  // Remove the focus indicator on mouse-focus for browsers
  // that do support :focus-visible
  &:focus:not(:focus-visible)::before {
    border: unset;
  }

  // Accent bar
  &::after {
    position: absolute;
    content: "";
    top:    0;
    left:   0;
    width:  pfe-local(accent--width);
    height: 100%;
    background-color: pfe-local(accent); // defaults to transparent
    z-index: calc(#{pfe-local(ZIndex)} + 1);
  }

  // Hover, active, and focus state (only when not open)
  // States source from the button element, not the host
  &:hover,
  &:active,
  :host(:not([expanded])) &:focus {
    --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--active)};
    --pfe-accordion--Color:           #{pfe-local(Color--active, inherit)};
    --pfe-accordion--accent:          #{pfe-local(accent--active)};

    border-right-color: pfe-local(BorderColor);
    border-left-color: pfe-local(BorderColor);

    // Bump the left margin to allow the accent sit flush
    margin-left: calc(-1 * #{pfe-local(BorderWidth)});
    width: calc(100% + #{pfe-local(BorderWidth)});
    .pf-c-accordion__toggle-wrapper {
      padding-left: pfe-local(BorderWidth);
    }
  }
  
  @each $context in (dark, saturated) {
    $overlay: rgba(247, 247, 249, .1);
  
    @if $context == saturated {
      $overlay: rgba(0, 0, 0, .2);
    }
    
    // Set properties to use their active modifier
    :host([on="#{$context}"]) &:hover,
    :host([on="#{$context}"]:not([expanded])) &:focus,
    :host([on="#{$context}"]) &:active {
      --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--active, $overlay)};
      --pfe-accordion--Color:           #{pfe-local(Color--active, inherit)};
      --pfe-accordion--accent:          #{pfe-local(accent--active, #{pfe-var(ui-accent--on-#{$context})})};
    }
  }

  // @TODO Should this come from accordion or it's wrapper?
  // Dark mode styles pull from the dark context styles; should match above ^
  // @media (prefers-color-scheme: dark) {
  //   // Set properties to use their active modifier
  //   &:hover,
  //   &:active,
  //   :host(:not([expanded])) &:focus {
  //     --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--active, rgba(247, 247, 249, .1))};
  //     --pfe-accordion--Color:           #{pfe-local(Color--active, inherit)};
  //     --pfe-accordion--accent:          #{pfe-local(accent--active, #{pfe-var(ui-accent--on-dark)})};
  //   }
  // }

  :host([expanded]) &,
  :host(.animating) & {
    border-bottom-width: 0;
  }

  :host([expanded]) &,
  :host(.animating) &,
  :host([disclosure="true"]) {
    border-right-color: pfe-local(BorderColor);
    border-left-color:  pfe-local(BorderColor);
  }

  // Persist the border top on the first child but hide it on subsequent headers when open
  // Panel borders will provide the visual delineation
  :host([expanded]:not(:first-child)) &,
  :host(.animating:not(:first-child)) & {
    border-top-width: 0;
  }
}

.pf-c-accordion__toggle-wrapper {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: calc(#{pfe-var(container-padding)} * 1.5); // 24px
}

// Text inside the button, wrapped in a span tag
// limits text width to 80ch per readability research
.pf-c-accordion__toggle-text {
  max-width: pfe-local(MaxWidth--content);
}

// Chevron icon
.pf-c-accordion__toggle-icon {
  margin-top: calc((1em * #{pfe-var(line-height)} - 1em) / 4);
  align-self: flex-start;
  transition: transform pfe-var(animation-speed) pfe-var(animation-timing);

  :host([expanded]) &,
  :host(.animating) & {
    transform: rotate(90deg);
  }

  :host([disclosure="true"]) & {
    order: -1;
  }
}

// Applies to accent region inside the template
slot {
  display: block;
  flex-grow: 1;
}
