// Import the base styles first
@import "../../pfe-collapse/src/pfe-collapse-panel.scss";

// Then layer the shared assets over it
@import "shared-assets";

/// ===========================================================================
/// ACCORDION PANEL
/// Styles sourced from: @patternfly/patternfly/components/Accordion/accordion.scss
/// then updated for pfe theming variables
/// ===========================================================================

:host {
  @include pfe-box-sizing;

  width: 100%;
  z-index: 0;

  margin: 0;
  padding: 0;
  
  outline: none;

  background-color: pfe-local(BackgroundColor, transparent);
  color: pfe-local(Color);

  // Border settings
  border-style: pfe-var(surface--border-style);
  border-width: pfe-local(BorderWidth, $fallback: 0);

  // Force IE11 to use white to prevent content from being un-readable
  @include browser-query(ie11) {
    background-color: pfe-fetch(surface--lightest) !important;
    color: pfe-fetch(text) !important;
  }

  ::slotted(*) {
    // Ensure the box shadow does not propagate to nested accordions
    --pfe-accordion--BoxShadow: none;
  }

  // Accent bar
  &::after {
    position: absolute;
    content: "";
    top: 0;
    left: 0;
    width: pfe-local(accent--width);
    height: 100%;
    background-color: pfe-local(accent); // defaults to transparent
    z-index: calc(#{pfe-local(ZIndex)} + 1);
  }
}

:host([expanded]),
:host(.animating) {
  background-color: #{pfe-local(BackgroundColor--expanded)};
  color: #{pfe-local(Color--expanded)};

  &::after {
    background-color: #{pfe-local(accent--expanded)};
  }
}

@each $context in (dark, saturated) {
  $overlay: rgba(247, 247, 249, .1);

  @if $context==saturated {
    $overlay: rgba(0, 0, 0, .2);
  }

  // Set properties to use their active modifier
  :host([on="#{$context}"][expanded]),
  :host([on="#{$context}"].animating) {
    background-color: #{pfe-local(BackgroundColor--expanded, $overlay)};
    color: #{pfe-local(Color--expanded, pfe-broadcasted(text--on-#{$context}))};

    &::after {
      background-color: #{pfe-local(accent--expanded, pfe-var(ui-accent--on-#{$context}))};
    }
  }
}

.pf-c-accordion__expanded-content {
  @extend %container;
  @include pfe-clearfix;
  padding: pfe-local(Padding);

  :host([disclosure="true"]) & {
    padding: pfe-local(Padding, $region: panel-container, $fallback: 0 calc(#{pfe-var(container-padding)} * 3) calc(#{pfe-var(container-padding)}) calc(#{pfe-var(container-padding)} * 1.5));
  }

  // Allow opt-out of panel max-width via attribute or CSS variable
  :host(:not([full-width])) & {
    max-width: pfe-local(MaxWidth--content);
  }
}

/// ===========================================================================
/// EXPANDED STYLES
/// ===========================================================================
:host([expanded]),
:host(.animating) {
  box-shadow: pfe-local(BoxShadow);

  border-color: pfe-local(BorderColor);
  border-width: pfe-local(BorderWidth);
  
  // When open, no visible top border on the panel
  border-top-width: 0;

  // Bump the left margin to allow the accent sit flush
  margin-left: calc(-1 * #{pfe-local(BorderWidth)});
  width: calc(100% + #{pfe-local(BorderWidth)});
}

:host(:not([on="light"])) {
  box-shadow: none;
}
