@import "../../pfe-sass/pfe-sass";

$LOCAL: band;

$LOCAL-VARIABLES: (
  // Default spacing values
  Padding--vertical:    calc( #{pfe-var(container-spacer)} * 4),
  Padding--horizontal:  calc( #{pfe-var(container-spacer)} * 1),

  // Surface colors
  BackgroundColor:    pfe-var(surface--base),
  context: light,
  BackgroundPosition: center center,

  // Border settings
  Border: pfe-var(surface--border-width) pfe-var(surface--border-style) transparent,

  // Layouts, grid layouts
  layout: 1fr,
  
  header: (
    layout: 1fr,
    gutter--vertical:   pfe-var(container-spacer),
    gutter--horizontal: calc(#{pfe-var(container-spacer)} * 3)
  ),
  body:   (
    layout: 1fr,
    gutter--vertical:   pfe-var(container-spacer),
    gutter--horizontal: calc(#{pfe-var(container-spacer)} * 3)
  ),
  footer: (
    layout: 1fr,
    gutter--vertical:   pfe-var(container-spacer),
    gutter--horizontal: calc(#{pfe-var(container-spacer)} * 3)
  ),
  aside:  (
    layout: 1fr,
    gutter--vertical:   pfe-var(container-spacer),
    gutter--horizontal: calc(#{pfe-var(container-spacer)} * 3)
  ),

  // Vertical spacing
  gutter--vertical:   pfe-var(container-spacer),
  gutter--horizontal: calc(#{pfe-var(container-spacer)} * 3),

  // Band width logic
  // Initialize at mobile breakpoint
  Width: auto,
  Width__aside--sm: 240px,
  Width__aside--lg: 300px,
);

// Nested internal variables (pfe-local calls), maps cannot "self-reference"
$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (
  // Bring them together for ease of use below
  Padding: pfe-local(Padding--vertical) pfe-local(Padding--horizontal)
));

$regions-grid: (
  header:
    "header"
    "body",
  aside:
    "body"
    "aside",
  footer:
    "body"
    "footer",
  header-aside:
    "header"
    "body"
    "aside",
  header-footer:
    "header"
    "body"
    "footer",
  footer-aside:
    "body"
    "aside"
    "footer",
  header-aside-footer: 
    "header"
    "body"
    "footer"
    "aside"
);

@function aside-grid($list, $full: false, $position: right, $bp: mobile) {
  // Initialize the return list to empty
  $return: ();

  // Remove the aside from the list for manipulation below
  $list: remove($list, "aside");

  // For desktop-sized viewports:
  @if ($bp == "desktop") {
    @each $section in $list {
      // If the aside region is full-height OR
      // the aside is body height & this is the body region
      @if $full or (not $full and $section == "body") {
        // Inject the aside region to the right or left
        // depending on the position variable
        @if $position != right {
          $return: append($return, "aside #{$section}");
        } @else {
          $return: append($return, "#{$section} aside");
        }
      } @else {
        // Otherwise region should span the grid 100%
        $return: append($return, "#{$section} #{$section}");
      }
    }

    // Return with this value for desktop, below is mobile-specific
    @return $return;
  }

  // Aside mobile top
  // Note: we don't have a setting for top specifically because you don't need
  // to use the function on mobile if the aside is not moved to the top
  @return "aside" $list;
}

:host {
  // @include pfe-set-broadcast-context(light);
  --context: #{pfe-local(context)};

  // Wrapper sets padding and background visuals
  display: block;

  // Border styles
  border: pfe-local(Border);

  // Base colors
  background-color:      pfe-local(BackgroundColor);
  background-position:   pfe-local(BackgroundPosition);
  color:                 pfe-broadcasted(text);

  // Custom padding on mobile
  padding: calc(#{pfe-local(Padding--vertical)} / 2)  pfe-local(Padding--horizontal);

  // Variable padding on desktop
  @media (min-width: pfe-breakpoint(sm)) {
    padding: pfe-local(Padding);
  }

  // Apply box-sizing styles
  @include pfe-box-sizing;

  // Remove background color for print
  @include pfe-no-print-background;

  @include pfe-print-media {
    // Add the border to the card for print
    border-radius: pfe-fetch(surface--border-radius);
    border: pfe-fetch(surface--border-width) pfe-fetch(surface--border-style) pfe-fetch(surface--border);
    // Reduce padding for print
    padding: #{pfe-fetch(container-spacer) * 2} pfe-fetch(container-spacer);
  }

  @include browser-query(ie11) {
    background-color: pfe-fetch(surface--lightest) !important;
    background-image: none !important;
    color: pfe-fetch(text) !important;

    padding: #{pfe-fetch(container-spacer) * 2} pfe-fetch(container-spacer);
    @media (min-width: pfe-breakpoint(sm)) {
      padding: #{pfe-fetch(container-spacer) * 4} pfe-fetch(container-spacer);
    }
  }
}

// Use-case for transparent backgrounds
@include pfe-contexts; // imports on="light" etc support

// Pull in pfe-var settings for all supported surface colors
@include pfe-surfaces;

// thinner padding on top & bottom
:host([size="small"]) {
  padding: calc(#{pfe-local(Padding--vertical)} / 4) #{pfe-local(Padding--horizontal)};
  @include browser-query(ie11) {
    padding: pfe-fetch(container-spacer);
  }
}

.pfe-band__container {
  margin: 0 auto;

  :host(:not([full-width])) & {
    max-width: pfe-local(Width);
    // Loop through the other breakpoints
    @each $size in (md, lg, xl) {
      @media screen and (min-width: pfe-breakpoint(#{$size})) {
        max-width: pfe-local(Width, $fallback: calc(#{pfe-breakpoint(#{$size})} - (#{pfe-local(Padding--horizontal)} * 4) ));
      }
    }
  }

  @supports (display: grid) {
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: auto;

    grid-template-areas: "body";

    grid-row-gap: pfe-local(gutter--vertical);
    row-gap:      pfe-local(gutter--vertical);
    grid-column-gap:  pfe-local(gutter--horizontal);
    column-gap:       pfe-local(gutter--horizontal);
    
    // Styles for the different combination of regions
    //-- Grid template area styles --//
    @each $selectors, $layout in $regions-grid {
      $sets: ();
      $has_aside: str-index($selectors, "aside");

      @each $region in str-split($selectors, "-") {
        $sets: append($sets, "[has_#{$region}]");
      }

      // Combine the sets into a selector
      $regions: to-string($sets, "");

      // Declare the mobile-first layouts
      :host(#{$regions}) & {
        grid-template-areas: $layout;
      }

      // If there is an aside region, create variants for 
      //   1. mobile top placement
      //   2. desktop left positioning
      //   3. full height layout

      @if ($has_aside) {
        // 0-MD breakpoint
        @media (max-width: pfe-breakpoint(md, $max: true)) {
          :host(#{$regions}[aside-mobile="top"]) & {
            grid-template-areas: aside-grid($layout);
          }
        }

        // MD+ breakpoint
        @media (min-width: pfe-breakpoint(md)) {
          :host(#{$regions}) & {
            grid-template-areas: aside-grid($layout, $bp: desktop);
          }

          :host(#{$regions}[aside-desktop="left"]) & {
            grid-template-areas: aside-grid($layout, $position: left, $bp: desktop);
          }

          @if length($layout) > 2 {
            :host(#{$regions}[aside-height="full"]) & {
              grid-template-areas: aside-grid($layout, $full: true, $bp: desktop);
            }

            :host(#{$regions}[aside-desktop="left"][aside-height="full"]) & {
              grid-template-areas: aside-grid($layout, $full: true, $position: left, $bp: desktop);
            }
          }
        }
      }

    }
    //-- END grid template area styles --//

    @media (min-width: pfe-breakpoint(md)) {
      grid-template-rows: auto;
      grid-template-columns: 1fr;

      :host([has_aside]) & {
        grid-template-rows: auto;
        grid-template-columns: 1fr pfe-local(Width__aside--sm);
      }

      :host([has_aside][aside-desktop="left"]) & {
        grid-template-rows: auto;
        grid-template-columns: pfe-local(Width__aside--sm) 1fr;
      }
    }

    @media (min-width: pfe-breakpoint(lg)) {    
      :host([has_aside]) & {
        grid-template-rows: auto;
        grid-template-columns: pfe-local(layout, $fallback: 1fr pfe-local(Width__aside--lg));
      }
      :host([has_aside][aside-desktop="left"]) & {
        grid-template-rows: auto;
        grid-template-columns: pfe-local(layout, $fallback: pfe-local(Width__aside--lg) 1fr);
      }
    }
  }

  :host([full-width]) & {
    max-width: pfe-local(Width, $fallback: 100%);
    // Set the regions to fill their containers
    @each $size in ("md", "lg", "xl") {
      @media screen and (min-width: pfe-breakpoint( #{$size} ) ) {
        @if ($size == "md" or $size == "lg") {
          width: calc(100% - #{pfe-local(Padding--horizontal)} * 4);
        } @else if ($size == "xl") {
          width: calc(100% - #{pfe-local(Padding--horizontal)} * 8);
        }
      }
    }
  }
}

.pfe-band__container,
.pfe-band__wrapper {
  width: 100%;

  // Fallback margins if grid is not used
  margin-bottom: calc(-1 * #{pfe-local(gutter--vertical)});
  margin-right: calc(-1 * #{pfe-local(gutter--vertical)});
  @supports (display: grid) {
    margin: 0 auto;
  }
}

.pfe-band__wrapper {
  :host([full-width]) & {
    max-width: pfe-local(Width, $fallback: 100%);
  }
}

.pfe-band__aside {
  height: 100%;
}

slot[name="pfe-band--aside"] {
  display: block;
  height: 100%;
}

@each $section in (header, body, footer, aside) {
  .pfe-band__#{$section} {
    // Fallback margins if grid is not used
    margin-bottom: pfe-local(gutter--vertical, $region: $section);
    margin-right: pfe-local(gutter--vertical, $region: $section);

    // Enforce container limits
    @include browser-query(ie11) {
      width: 100%;
    }

    // Apply the grid layout
    @supports (display: grid) {
      // Apply the section as a named grid-area
      grid-area: $section;
      margin-bottom: 0;
      margin-right: 0;

      :host([use-grid]) & {
        display: grid;
        grid-template-rows: auto;
        grid-template-columns: pfe-local(layout, $region: $section);

        grid-row-gap: pfe-local(gutter--vertical, $region: $section);
        row-gap:      pfe-local(gutter--vertical, $region: $section);
        grid-column-gap:  pfe-local(gutter--horizontal, $region: $section);
        column-gap:       pfe-local(gutter--horizontal, $region: $section);
      }
    }
  }
}

// For each section in the band layout,
// define their internal behavior for slotted elements
@include browser-query(ie11) {
  .pfe-band__container {
    @include pfe-clearfix;
  }

  .pfe-band__header,
  .pfe-band__body,
  .pfe-band__footer {
    float: left;

    :host([aside-mobile="top"]) & {
      float: right;
    }
  
    :host(:not([aside-height="full"])) & {
      width: 60%;
    }
  }

  .pfe-band__footer {
    clear: both;
  }

  .pfe-band__aside {
    flex-grow: 1;
    align-self: flex-start;

    float: right;
    
    width: 35%;
    margin: 0 1.9%;
      
    :host([aside-desktop="left"]) & {
      float: left;
    }
  }

  .pfe-band__wrapper {
    width: 60%;
    float: left;
          
    :host([aside-desktop="left"]) & {
      float: right;
    }
  }
}
