@use "@patternfly/pfe-sass" as *;
@use "sass:map";
@use "sass:string";

@include configure(
  $name: 'button',
  $variables: (
    BackgroundColor: pfe-var(ui-accent),
    BackgroundColor--hover: pfe-var(ui-accent--hover),
    Color: pfe-var(ui-base--text),
    FontSize: pfe-var(FontSize--md),
    Border: 0,
    BorderRadius: pfe-var(surface--border-radius),
    Padding: calc(#{pfe-var(container-padding)} / 2) pfe-var(container-padding),
    LineHeight: pfe-var(line-height),
    after: (
      BorderColor: transparent,
      BorderColor--hover: transparent,
    ),
  ),
);

// Nested internal variables (pfe-local calls), maps cannot "self-reference"
@include merge-local-variables((
  after: (
    Border: pfe-var(ui--border-width) pfe-var(ui--border-style) pfe-local(BorderColor, $region: after),
    Border--hover: pfe-var(ui--border-width) pfe-var(ui--border-style) pfe-local(BorderColor--hover, $region: after),
  ),
));

:host {
  display: inline-block;
}

:host([hidden]) {
  display: none;
}

::slotted(button) {
  background-color: pfe-local(BackgroundColor);
  color: pfe-local(Color);
  font-size: pfe-local(FontSize);
  font-family: pfe-var(font-family, $fallback: inherit);
  font-weight: pfe-local(FontWeight);
  padding: pfe-local(Padding);
  cursor: pointer;
  border-radius: pfe-local(BorderRadius);
  border: pfe-local(Border);
  position: relative;
  line-height: pfe-local(LineHeight);
  &::after {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    content: "";
    border: pfe-local(Border, $region: after);
    border-radius: pfe-local(BorderRadius);
  }
}

:host([variant="danger"]) {
  ::slotted(button) {
    background-color: pfe-local(BackgroundColor, pfe-var(feedback--critical--lighter));
  }

  ::slotted(button:hover),
  ::slotted(button:focus) {
    --pfe-button--BackgroundColor: #{pfe-local(BackgroundColor--hover, pfe-var(feedback--critical))};
  }
}

:host([variant="secondary"]),
:host([variant="tertiary"]),
:host([variant="control"]) {
  ::slotted(button) {
    background-color: pfe-local(BackgroundColor, transparent);
  }

  ::slotted(button:hover),
  ::slotted(button:focus) {
    --pfe-button--BackgroundColor: #{pfe-local(BackgroundColor--hover, transparent)};
    --pfe-button__after--Border: #{pfe-local(Border--hover, $region: after, $fallback: pfe-var(ui--border-width--md) pfe-var(ui--border-style) pfe-local(BorderColor, $region: after))};
  }
}

:host([variant="secondary"]) {
  ::slotted(button) {
    color: pfe-local(Color, pfe-var(ui-accent));
    &::after {
      border-color: pfe-local(BorderColor, $region: after, $fallback: pfe-var(ui-accent));
    }
  }
}

:host([variant="tertiary"]) {
  ::slotted(button) {
    color: pfe-local(Color, pfe-var(text));
    &::after {
      border-color: pfe-local(BorderColor, $region: after, $fallback: pfe-var(text));
    }
  }
}

:host([variant="control"]) {
  ::slotted(button) {
    color: pfe-local(Color, pfe-var(text));
    border-radius: pfe-local(BorderRadius, 0);
    &::after {
      border-color: pfe-local(BorderColor, $region: after, $fallback: pfe-var(ui--border--lightest));
      border-bottom-color: pfe-var(ui--border);
    }
  }

  ::slotted(button:hover),
  ::slotted(button:focus) {
    --pfe-button__after--BorderColor: #{pfe-local(BorderColor--hover, pfe-var(ui--border--lightest))};
    &::after {
      border-bottom-width: pfe-var(ui--border-width--md);
      border-bottom-color: pfe-var(ui-accent);
    }
  }
}

:host([variant="control"][disabled]) {
  ::slotted(button) {
    background-color: pfe-local(BackgroundColor, pfe-var(surface--lighter));
  }
}

:host([size="large"]) {
  ::slotted(button) {
    --pfe-button--FontWeight: #{pfe-local(FontWeight--large, $fallback: pfe-var(font-weight--semi-bold))};
    --pfe-button--Padding: #{pfe-local(Padding--large, $fallback: 12px 24px)};
  }
}

:host([disabled]) {
  ::slotted(button) {
    background-color: pfe-local(BackgroundColor, pfe-var(ui-disabled));
    color: pfe-local(Color, pfe-var(ui-disabled--text));
    pointer-events: none;
    &::after {
      border: pfe-local(Border, $region: after, $fallback: 0);
    }
  }
  ::slotted(button:hover),
  ::slotted(button:focus) {
    --pfe-button--BackgroundColor: #{pfe-local(BackgroundColor--hover, pfe-var(ui-disabled))};
    --pfe-button__after--Border: #{pfe-local(Border--hover, $region: after, $fallback: 0)};
  }
}

::slotted(button:hover),
::slotted(button:focus) {
  --pfe-button--BackgroundColor: #{pfe-local(BackgroundColor--hover)};
  --pfe-button__after--Border: #{pfe-local(Border--hover, $region: after)};
}
