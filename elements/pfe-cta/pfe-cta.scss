@use "@patternfly/pfe-sass" as *;

// Look here for the variant maps
@import "shared-assets";

:host {
  display: inline-block;
  position: relative;
  z-index: 0;
  vertical-align: middle;
  max-width: pfe-local(MaxWidth);
  background-color: pfe-local(BackgroundColor);
  border-radius: pfe-local(BorderRadius);
  border: pfe-var(ui--border-width) pfe-var(ui--border-style) pfe-local(BorderColor);
  cursor: pointer;
}

::slotted(*) {
  white-space: normal;
  display: inline;
  padding: pfe-local(Padding) !important;
  color: pfe-local(Color) !important;
  font-family: pfe-local(FontFamily);
  font-size: pfe-local(FontSize);
  font-weight: pfe-local(FontWeight);
  line-height: pfe-local(LineHeight);
  text-decoration: pfe-local(TextDecoration) !important;

  :host([priority]) & {
    font-size: pfe-local(FontSize--priority);
    text-align: center;
  }

  :host([aria-disabled="true"]) & {
    cursor: default !important;
    font-size: pfe-local(FontSize, $fallback: pfe-var(FontSize--md));
  }

  :host([priority]) &,
  :host([aria-disabled="true"]) & {
    padding: pfe-local(Padding, $fallback: pfe-var(container-padding) calc(#{pfe-var(container-padding)} * 2)) !important;
  }
}

:host(:not([aria-disabled="true"]):focus),
:host(:not([aria-disabled="true"]).focus-within),
:host(:not([aria-disabled="true"]).focus-within) ::slotted(*),
:host(:not([aria-disabled="true"])) ::slotted(:focus) {
  outline: none !important;
}

::slotted(button),
::slotted(input) {
  @extend %reset-button;
}

.pfe-cta {
  &--wrapper {
    display: block;
    white-space: nowrap;
    min-width: 100%;

    :host([priority]) &,
    :host([aria-disabled="true"]) & {
      display: flex;
      flex-flow: row nowrap;
      align-items: center;
      height: 100%;
    }
    // Default CTA arrow wrap fix for Firefox
    :host(:not([priority]):not([aria-disabled="true"])) & {
      @include browser-query(firefox) {
        max-width: calc(100% - 1ch - #{pfe-local(size, $region: arrow)});
      }
    }
    @include browser-query(edge) {
      button,
      input {
        @extend %reset-button;
      }
    }
  }
  &--inner {
    // inner border on priority CTAs
    display: block;
    height: calc(100% - 4px);
    width: calc(100% - 4px);

    box-sizing: border-box;
    position: absolute;
    top: 2px;
    left: 2px;
    z-index: -1;

    border: pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-local(BorderColor, $region: inner);
    border-radius: 2px;
    outline: none;
  }
  &--arrow {
    display: pfe-local(Display, $region: arrow);
    padding: pfe-local(Padding, $region: arrow);
    fill:    pfe-local(Color);
    width:   pfe-local(size, $region: arrow);
    height:  pfe-local(size, $region: arrow);
    transition: padding pfe-var(animation-speed) pfe-var(animation-timing);
    margin-bottom: -1px;
  }
}

// Set svg to none so it won't render in nav on iOS versions 12>
:host([priority]) svg {
  display: none;
}


/// ===========================================================================
/// BELOW THIS POINT, LOCAL VARIABLE OVERRIDES ONLY, handled by the pfe-print-local function
/// Maps can be found in the pfe-cta/_shared-assets.scss file

// - The location of these styles in the doc is important for clarity and specficity
// - priority="primary" sets its own background colors, so it ignores broadcast
// - if there is no broadcast variable available, these are still seen by the browser, so we also set fallbacks here!
// - Fallback values should match whats above


:host([priority="primary"]) {
  @include pfe-print-local($primary);
}

:host([priority="secondary"]) {
  @include pfe-print-local($secondary);
}


/// ===========================================================================
/// CONTEXT CTA VARIANTS
/// ===========================================================================


:host([priority="primary"][on="dark"]),
:host([priority="primary"][on="saturated"]) {
  @include pfe-print-local($primary-saturated);
}

:host([priority="secondary"][on="dark"]),
:host([priority="secondary"][on="saturated"]) {
  @include pfe-print-local($secondary-dark);
}

/// ===========================================================================
// COLOR ATTRIBUTE OVERRIDES
// Default & Wind variant CTAs are ommitted because they use the link color, not UI colors
/// ===========================================================================

/// ===========================================================================
/// COLOR=ACCENT
/// ===========================================================================


// Primary omitted because it already uses the accent color

:host([priority="secondary"][color-palette="accent"]) {
  @include pfe-print-local($secondary-accent);
}

/// ===========================================================================
/// COLOR=BASE
/// ===========================================================================

:host([priority="primary"][color-palette="base"]) {
  @include pfe-print-local($primary-base);
}

:host([priority="secondary"][color-palette="base"]) {
  @include pfe-print-local($secondary-base);
}

/// ===========================================================================
/// WIND CTA VARIANTS
/// ===========================================================================

:host([priority="secondary"][variant="wind"]) {
  @include pfe-print-local($secondary-wind);
}

// @TODO: Deprecated
/// ===========================================================================
/// DISABLED CTA VARIANTS
/// ===========================================================================

:host([aria-disabled="true"]) {
  @include pfe-print-local($disabled);
}

/// ===========================================================================
/// CTA STATES: HOVER, FOCUS
/// ===========================================================================

// Note: Focus states need to be defined before hover states
:host(:not([aria-disabled="true"]):focus),
:host(:not([aria-disabled="true"]).focus-within) {
  --pfe-cta--BackgroundColor: #{pfe-local(BackgroundColor--focus)};
  --pfe-cta--BorderColor:     #{pfe-local(BorderColor--focus)};
  --pfe-cta--Color:           #{pfe-local(Color--focus)};
  --pfe-cta--TextDecoration:  #{pfe-local(TextDecoration--focus)};
  --pfe-cta__inner--BorderColor: #{pfe-local(BorderColor--focus, $region: inner)};
}

// Note: Hover states need to be defined after focus states
:host(:not([aria-disabled="true"]):hover),
:host(:not([aria-disabled="true"])) ::slotted(:hover) {
  --pfe-cta--BackgroundColor: #{pfe-local(BackgroundColor--hover)};
  --pfe-cta--BorderColor:     #{pfe-local(BorderColor--hover)};
  --pfe-cta--Color:           #{pfe-local(Color--hover)};
  --pfe-cta--TextDecoration:  #{pfe-local(TextDecoration--hover)};
  --pfe-cta__inner--BorderColor: #{pfe-local(BorderColor--hover, $region: inner)};
  --pfe-cta__arrow--Padding:     #{$arrow-hover};
}
