@import "../../pfe-sass/pfe-sass";
@include pfe-contexts;

$LOCAL: icon;

$LOCAL-VARIABLES: (
  context: light,
  size: pfe-var(icon-size),
  spacing: pfe-var(container-spacer),
  Padding: 0,
  BackgroundColor: transparent,
  BorderWidth: pfe-var(ui--border-width),
  // @TODO Deprecated variable for changing icon color
  Color: pfe-broadcasted(text),
);

// Nested internal variables (pfe-local calls), maps cannot "self-reference"
$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, ( // Current variable for updating icon color
    color: pfe-local(Color),
    BorderColor: pfe-local(BackgroundColor)));

/// ===========================================================================
/// Component Specific SASS Vars
/// ===========================================================================

@mixin greyscale-fallback() {
  background-color: white !important;

  & svg filter feFlood {
    flood-color: black !important;
  }
}

@mixin pfe-icon--sizing($desired-size) {
  // Respect var if user set CSS var, but fallback to sizing property map
  max-width: pfe-local(size, $fallback: $desired-size);
  max-height: pfe-local(size, $fallback: $desired-size);

  @include browser-query(ie11) {
    width: $desired-size !important;
    height: $desired-size !important;
  }

  svg {
    width: pfe-local(size, $fallback: $desired-size);
    height: pfe-local(size, $fallback: $desired-size);

    @include browser-query(ie11) {
      width: $desired-size !important;
      height: $desired-size !important;
    }
  }
}

:host {
  --context: #{pfe-local(context)};

  position: relative;
  display:  inline-block;

  // Content-box model supports sizing while preserving aspect ratio (despite layout)
  box-sizing:   content-box !important;

  width:        fit-content !important;
  height:       fit-content !important;
  line-height:  0;

  max-width:  pfe-local(size);
  max-height: pfe-local(size);

  @include browser-query(ie11) {
    width: pfe-fetch(size) !important;
    height: pfe-fetch(size) !important;
  }
  
  svg {
    width:  pfe-local(size);
    height: pfe-local(size);

    @include browser-query(ie11) {
      width: pfe-fetch(size) !important;
      height: pfe-fetch(size) !important;
    }
  }
}

:host([block]) {
  display: block;
  margin-bottom:  pfe-local(spacing);
  margin-top:     pfe-local(spacing);

  &:first-child {
    margin-top: 0;
  }
}

:host(:not(.load-failed)) {
  vertical-align: middle;
  border-radius: 50%;
  background-color: pfe-local(BackgroundColor);
  border: pfe-local(BorderWidth) pfe-var(ui--border-style) pfe-local(BorderColor);
  padding: pfe-local(Padding);

  @include browser-query(ie11) {
    @include greyscale-fallback();
  }

  // Edge 12+ CSS
  @include browser-query(edge12) {
    @include greyscale-fallback();
  }

  svg image {
    @include browser-query(ie11) {
      filter: none;
    }
  }

  filter feFlood {
    flood-color: pfe-local(color);
  }

  .pfe-icon--fallback {
    display: none;
  }
}

@for $num from 2 through 4 {
  :host([size="#{$num}x"]) {
    @include pfe-icon--sizing(#{$num}em);
  }
}

$sizing: (
  xl: 100px,
  lg: 64px,
  md: 32px,
  sm: 14px
);

// @TODO: Sort out sizing
@each $label, $size in $sizing {
  :host([size="#{$label}"]) {
    @include pfe-icon--sizing($size);
  }
}

// @TODO May need to add feedback--darkest colors too
:host([circled]:not([circled="false"])) {
  padding: pfe-local(Padding, $fallback: .5em);
  background-color: pfe-local(BackgroundColor, $fallback: pfe-var(surface--lightest));
  border-color: pfe-local(BorderColor, $fallback: pfe-local(BackgroundColor, $fallback: pfe-var(surface--border)));
}

@each $level in (critical, important, moderate, success, info, default) {
  :host([color="#{$level}"]:not([circled])),
  :host([color="#{$level}"][circled="false"]) {
    filter feFlood {
      flood-color: pfe-local(color,
        $fallback: pfe-local(Color, $fallback: pfe-var(feedback--#{$level})));
    }
  }


  /* Override circled items with color set to named property */
  :host([color="#{$level}"][circled]:not([circled="false"])) {
    // Respect var if user set CSS var, but fallback to property
    $desired-color: pfe-local(BackgroundColor, $fallback: pfe-var(feedback--#{$level}));
    background-color: $desired-color;
    border-color: pfe-local(BorderColor, $fallback: $desired-color);

    @if $level !="moderate" {
      --pfe-icon--context: dark;
    }
  }
}

@each $color in (lightest, base, darker, darkest, complement, accent) {
  :host([color="#{$color}"]:not([circled])),
  :host([color="#{$color}"][circled="false"]) {
    filter feFlood {
      flood-color: pfe-local(color, $fallback: pfe-local(Color, $fallback: pfe-var(surface--#{$color})));
    }
  }


  /* Override circled items with color set to named property */
  :host([color=#{$color}][circled]:not([circled="false"])) {
    --pfe-icon--context: #{pfe-var(surface--#{$color}--context)};

    // Respect var if user set CSS var, but fallback to property
    $desired-color: pfe-local(BackgroundColor, $fallback: pfe-var(surface--#{$color}));
    background-color: $desired-color;
    border-color: pfe-local(BorderColor, $fallback: $desired-color);
  }
}

:host(.load-failed.has-fallback) svg,
:host(.load-failed[on-fail="collapse"]) svg,
:host(.load-failed) svg image {
  display: none;
}

:host(.load-failed[on-fail="collapse"]) {
  @include pfe-icon--sizing(0);
}
