@import "../../pfe-sass/pfe-sass";

$LOCAL: modal;

$pfe-modal--breakpoint--medium: 640px;

$LOCAL-VARIABLES: (
	context: light,
	MaxHeight: 90vh,
	MaxWidth: 70vw,
	MaxWidth--mobile: 94vw,
	MaxWidth--small: #{"min(35rem, 94vw)"},
	MaxWidth--medium: #{"min(52.5rem, 94vw)"},
	MaxWidth--large: #{"min(70rem, 94vw)"},
	MinWidth: 0,
	Padding: calc(#{pfe-var(container-padding)} * 2) calc(#{pfe-var(container-padding)} * 3.5) calc(#{pfe-var(container-padding)} * 2) calc(#{pfe-var(container-padding)} * 2),
	overlay: (
		BackgroundColor: pfe-var(overlay)
	),
	close: (
		size: calc(#{pfe-var(ui--element--size)} - 4px)
	)
);

:host {
	display: block;
	position: relative;
}

.pfe-modal {
	&__outer {
		display: flex;
		position: fixed;
		height: 100%;
		width: 100%;
		top: 0;
		left: 0;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		z-index: pfe-zindex(modal);

		&[hidden] {
			display: none;
		}
	}
	&__overlay {
		position: fixed;
		height: 100%;
		width: 100%;
		top: 0;
		left: 0;
		background-color: pfe-local(BackgroundColor, $region: overlay);
		cursor: pointer;

		&[hidden] {
			display: none;
		}
	}
	&__window {
		--context: #{pfe-local(context)};
		@include pfe-set-broadcast-context(#{pfe-fetch(context)});

		position: relative;
		max-width: pfe-local(MaxWidth--mobile);
		min-width: pfe-local(MinWidth);
		max-height: pfe-local(MaxHeight);
		margin: 0 auto;
		box-shadow: pfe-var(box-shadow--lg);
		background-color: pfe-var(surface--lightest);
		color: pfe-var(text);
		border-radius: pfe-var(ui--border-radius);

		@media screen and (min-width: $pfe-modal--breakpoint--medium) {
			max-width: var(--pfe-modal-width, pfe-local(MaxWidth--large));
		}
		:host([width="small"]) & {
			max-width: pfe-local(MaxWidth--small);
		}

		:host([width="medium"]) & {
			max-width: pfe-local(MaxWidth--medium);
		}

		:host([width="large"]) & {
			max-width: pfe-local(MaxWidth--large);
		}
	}
	&__container {
		position: relative;
		max-height: inherit;

		&[hidden] {
			display: none;
		}
	}
	&__content {
		overflow-y: auto;
		overscroll-behavior: contain;
		max-height: pfe-local(MaxHeight);
		padding: pfe-local(Padding);
		box-sizing: border-box;

		@media screen and (max-height: $pfe-modal--breakpoint--medium) {
			padding: pfe-local(Padding, $fallback: pfe-var(container-padding) calc(#{pfe-var(container-padding)} * 3) pfe-var(container-padding) pfe-var(container-padding));
		}

		:host(:not([has_header])) & {
			// Remove margin-top on the first slotted element that is not the header.
			::slotted(*:nth-child(2)),
			::slotted(*:nth-child(1)) {
				margin-top: 0 !important;
			}
		}

		::slotted([slot="pfe-modal--header"]) {
			margin-top: 0 !important;
		}
	}
	&__close {
		@extend %reset-button;
		position: absolute;
		top: 	calc(#{pfe-var(container-padding)} * .25);
		right: 	calc(#{pfe-var(container-padding)} * .25);
		cursor: pointer;
		line-height: .5;
		padding: pfe-var(container-padding);

		@media screen and (min-width: $pfe-modal--breakpoint--medium) {
			top: 	pfe-var(container-padding);
			right: 	pfe-var(container-padding);
		}

		@media screen and (max-height: $pfe-modal--breakpoint--medium) and (min-width: $pfe-modal--breakpoint--medium) {
			top: 	calc(#{pfe-var(container-padding)} / 2);
			right: 	calc(#{pfe-var(container-padding)} / 2);
		}

		> svg {
			fill: 	pfe-var(text);
			height: pfe-var(ui--element--size);
			width: 	pfe-var(ui--element--size);
			height: pfe-local(size, $region: close);
			width: 	pfe-local(size, $region: close);
		}
	}
}
