// Please see the pfe-sass README for guidance on using these tools
@import "../../pfe-sass/pfe-sass";


$LOCAL: primary-details;

// This variable is global so that helper functions can reference it
$LOCAL-VARIABLES: (
  Border: pfe-var(ui--border-width--sm) pfe-var(ui--border-style) pfe-var(ui--border--lighter),

  // Applied to the layout of the nav vs details
  GridTemplateColumns: 1fr 2fr,

  nav: (
    Color: pfe-var(text),
    Color--active: pfe-var(link),
    Background--active: #f0f0f0,
  ),
  details: (
    Background: pfe-var(surface--lightest),
  ),
);

* {
  box-sizing: border-box;
}

:host {
  display: block;
  border: pfe-local(Border);
  // For compact styling and transitioning from compact to normal styling
  overflow: hidden;
}

:host([hidden]) {
  display: none;
}

#wrapper {
  display: grid;
  grid-template-columns: pfe-local(GridTemplateColumns);
  align-items: stretch;
  justify-content: stretch;
  overflow: hidden;
  transition: transform 0.25s ease-in-out;
  will-change: transform;
  backface-visibility: visible;

  @media (prefers-reduced-motion) {
    transition: none;
    will-change: auto;
  }

  :host([breakpoint='compact']) & {
    display: grid;
    grid-template-columns: 50% 50%;
    gap: 0;
    width: 200%;
  }

  :host([breakpoint='compact']) &.active {
    // When active this column should be off the left side
    transform: translateX(-50%);
  }
}

#details-nav,
#details-nav__footer {
  :host([breakpoint='compact']) & {
    align-self: stretch;
    justify-self: stretch;
    // In compact layout all items are laid out in one column and
    // transform is used to push the inactive column off screen
    grid-row: 1;
    grid-column: 1;
  }
}

#details-nav__footer {
  :host([breakpoint='compact']) & {
    grid-row: 2;
  }
}

#details-nav {
  display: flex;
  flex-direction: column;
  margin: 0 2px; // Prevents focus ring from being clipped
  padding: 9px 0;
  border-right: pfe-local(Border);

  :host([breakpoint='compact']) & {
    border: 0;
  }
}

#details-nav__footer {
  :host([breakpoint='compact']) & {
    grid-row: 2;
  }
}

::slotted([slot="details-nav"]) {
  position: relative;
  display: block!important;
  appearance: none!important;
  background: transparent!important;
  border: 0!important;
  margin: 0!important;
  padding: 0.5em 1.5em 0.5em 0.75em!important;
  font: inherit;
  line-height: 1.5;
  text-align: left!important;
  color: pfe-local(Color, $region: nav)!important;
  cursor: pointer!important;

  &:before {
    content: '';
    position: absolute;
    top: 50%;
    right: 0%;
    margin-right: 16px;
    display: block;
    width: 0.75em;
    height: 0.75em;
    box-shadow: inset -0.1875em -0.1875em 0 0.0625em #000;
    transform: translate(-50%, -50%) scale(0.6) rotate(314deg);
  }

  :host([breakpoint='desktop']) & {
    &:before {
      content: none;
    }
  }
}

::slotted([aria-selected="true"]),
::slotted([aria-expanded="true"]) {
  color: pfe-local(Color--active, $region: nav)!important;
  background: pfe-local(Background--active, $region: nav)!important;
}

// Right column
#details-wrapper {
  $horizontal-padding: 1.5em;
  padding: 0.5em $horizontal-padding;
  background: pfe-local(Background, $region: details);

  :host([breakpoint='compact']) & {
    grid-row: 1 / span 2;
    grid-column: 2;
    padding-top: 0;
  }

  // Consistent height is enforced with grid, which will respect the max-height of the tallest thing in the grid area
  :host([consistent-height]) & {
    display: flex;
    @supports (display: grid) {
      display: grid;
      grid-template: 1fr / 1fr;
      justify-items: start;
      align-items: start;
    }
  }

  :host([consistent-height][breakpoint='compact']) & {
    // Horizontal rule under back button at compact
    &:before {
      content: '';
      display: block;
      grid-row: 1;
      grid-column: 1;
      align-self: end;
      border-bottom: pfe-local(Border);
      // Make the header as wide as the full column
      width: calc(100% + #{$horizontal-padding * 2});
      // Make sure it's flush with the left edge
      margin-left: ($horizontal-padding * -1);
    }
  }
}

#details-wrapper__header {
  display: none;
  grid-row: 1 / span 1;
  grid-column: 1 / span 1;
  align-self: start;
  justify-self: stretch;

  :host([breakpoint='compact']) & {
    display: flex;
    align-items: flex-start;
  }
}

#details-wrapper__back {
  $focus-width: 2px;
  display: none; // Prevent from effecting layout at desktop
  position: relative;
  align-self: stretch;
  border: 0;
  margin: 2px 0 0; // Prevents focus border from being clipped
  background: transparent;
  font-size: inherit;
  font-family: inherit;
  font-weight: bold;
  cursor: pointer;
  text-align: left;

  &:focus {
    outline: 1px dashed #000 !important;
    outline-width: $focus-width !important;
  }

  :host([breakpoint='compact']) & {
    // Make sure it effects layout at compact
    // But shouldn't be selectable until it's active
    display: block;
    visibility: hidden;
  }

  :host([breakpoint='compact']) .active & {
    visibility: visible;
    width: 100%;
    padding-left: 16px;
  }

  &:before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0.5em;
    display: block;
    width: 0.75em;
    height: 0.75em;
    box-shadow: inset -0.1875em -0.1875em 0 0.0625em #000;
    transform: translate(-50%, -50%) scale(0.6) rotate(135deg);
  }
}

#details-wrapper__heading {
  margin: 0;
  padding: 0;
  font-size: inherit;
  line-height: 1.5;
  // Add top padding that's half of minimum back button size
  padding: 0.5em 0;
}

::slotted([slot="details"]) {

  :host([consistent-height]) & {
    display: block!important;
    grid-row: 1 / span 1!important;
    grid-column: 1 / span 1!important;
  }

  :host([consistent-height][breakpoint='compact']) & {
    grid-row: 2 / span 1!important;
  }
}

::slotted([hidden]) {
  visibility: hidden!important;
  // Using position absolute so grid doesn't account for them in the layout
  position: absolute!important;

  :host([consistent-height]) & {
    // Consistent height is setup so we want unopen panes to have a height that grid accounts for
    position: static!important;
  }
}

::slotted([slot="details-nav--footer"]) {
  border-right: pfe-local(Border) !important;
}

// @todo: add note in readme with focus indicator example and show ppl that they need to add a good focus indicator to focusable elements
// @todo: (KS) figure out if we still need this now that we have the lightdom stylesheet
::slotted(.is-focused:focus),
::slotted(.is-focused:hover) {
  outline: 1px dashed #000 !important;
  outline-width: 2px !important;
}
