@import "_shared-assets";

$LOCAL: progress-steps-item;

$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (
  // Width needs to be definitively set to ensure the line is calculated properly.
  Width: auto,
  circle: (
    color: pfe-var(surface--lightest),
    color--active: pfe-var(ui-accent)
  ),
  title: (
    Color: pfe-var(text), // was #151515
    Color--active: pfe-var(feedback--info),
    Color--error: pfe-var(feedback--critical--lighter)
  ),
  description: (
    Color: pfe-var(text--muted),
    Color--active: pfe-var(text--muted),
    Color--error: pfe-var(feedback--critical--lighter)
  )
));

:host {
  display: block;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

:host([vertical]) {
  flex-direction: row;
  align-items: flex-start;
}

// This is important so the .pfe-progress-steps
// can dynamically set the width of the items in horizontal
// layout. If this isn't set then the items are unable
// to line up correctly.
$LOCAL: progress-steps;
:host(:not([vertical])) {
  width: pfe-local(size, $region: item);
  text-align: center;
}
:host([vertical]:not(:last-child)) {
  min-height: pfe-local(size, $region: item);
}
$LOCAL: progress-steps-item;

:host([hidden]) {
  display: none;
}

:host([is_link]) {
  cursor: pointer;
}

// This negates the 1em for the vertical description on the height of the bar
:host([vertical]:not([has_description]):last-child) {
  margin-bottom: 1em;
}

.pfe-progress-steps-item {
  &__circle {
    box-sizing: border-box;

    position: relative;
    border-radius: 50%;
    border: pfe-var(ui--border-width--md) pfe-var(ui--border-style) pfe-var(ui--border--lighter);
    width: pfe-local(size, $region: circle); // 20px
    height: pfe-local(size, $region: circle);
    z-index: 2;

    background-color: pfe-local(color, $region: circle);

    margin: auto;
    margin: calc((#{pfe-local(size--active, $region: circle)} - #{pfe-local(size, $region: circle)}) / 2) auto; // top/bottom: (32px - 20px) / 2
    transform: translateX(#{pfe-var(ui--border-width--md)});

    :host([variant="count"]) &::before {
      content: attr(count);
      text-align: center;
      line-height: calc(#{pfe-local(size--active, $region: circle)} * .8);
      font-size: pfe-var(FontSize--xs);
      font-weight: 600;
      
      position: absolute;
      top: -.2em;
      left: -.2em;
      width: 20px;
      height: 20px;
    }

    :host([state="active"]) & {
      border-color: pfe-local(color--active, $region: circle);
      background-color: pfe-local(color--active, $region: circle);
      color: pfe-var(text--on-saturated);
    }

    &::after {
      display: none;

      position: absolute;
      content: "";
      border-radius: 50%;
      
      transform: translate(-50%, -50%);
      color: pfe-var(text--muted);
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 1;

      width:  pfe-local(size--active, $region: circle); // 32px
      height: pfe-local(size--active, $region: circle);

      :host([state="active"]) & {
        display: block;
        background-color: pfe-local(color--active, $region: circle);
        opacity: pfe-var(opacity); // was 0.15
      }
    }
      
    svg {
      z-index: 1;
      height: pfe-local(size, $region: circle);
      width:  pfe-local(size, $region: circle);
        
      position: absolute;
      transform: translate(-50%, -50%);
      top: 50%;
      left: 50%;

      vertical-align: -.125em;

      :host([state="done"]) & {
        fill: pfe-var(feedback--success);
      }

      :host([state="error"]) & {
        fill: pfe-var(feedback--important);
      }
    }
  }
  &__content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    margin-top: pfe-local(spacer);
    
    :host([vertical]) & {
      align-items: flex-start;
      margin-top: calc((#{pfe-local(size--active, $region: circle)} - #{pfe-local(size, $region: circle)}) / 2); // (32px - 20px) / 2
      margin-left: calc(((#{pfe-local(size--active, $region: circle)} - #{pfe-local(size, $region: circle)}) / 2) + #{pfe-local(spacer)});
    }
    &--title,
    &--title slot::slotted(*) {
      font-size: pfe-var(FontSize--md);
      color: pfe-local(Color, $region: title); // was #151515

      :host([is_link]) & {
        color: inherit;
      }

      @each $state in (hover, focus, visited) {
        :host([is_link]:#{$state}) & {
          color: pfe-local(Color, $region: title, $fallback: pfe-broadcasted(link--#{$state}));
          text-decoration: pfe-broadcasted(link-decoration--#{$state});
        }
      }

      :host([state="active"]) & {
        // leave with no fallback so it inherits correctly
        color: pfe-local(Color--active, $region: title);
        font-weight: pfe-var(font-weight--normal);
      }

      :host([state="error"]) & {
        color: pfe-local(Color--error, $region: title);
      }
    }
    &--description {
      color: pfe-local(Color, $region: description);
      font-size: pfe-var(FontSize--sm);
      // @TODO Use the new typography mixin
      // @include pfe-typography(sm, $type: "title", $base: false, $region: title);
      text-align: center;

      :host([state="error"]) & {
        color: pfe-local(Color--error, $region: title);
      }
    }
  }
}
