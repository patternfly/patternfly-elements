////
/// Accordion-specific SASS Vars
/// @group accordion
////

@function pfe-accordion-variables($state: default, $context: default, $variant: default) {
  // Shared variables for all contexts
  $accordion-styles: ();

  @if $state != expanded { // Default state
    // Shared variables for all contexts
    $accordion-styles: (
      BorderColor--accent: transparent,
      BorderColor:         pfe-var(surface--border),
      BorderTopWidth:      pfe-var(surface--border-width),
      BorderRightWidth:    0,
      BorderBottomWidth:   pfe-var(surface--border-width),
      BorderLeftWidth:     pfe-var(surface--border-width--heavy),
      Color:               pfe-broadcasted(text),
      TextAlign:           left,
      accent: pfe-var(ui-accent),
      base: (
        Padding:         pfe-var(container-spacer)
      )
    );

    @if $context == dark { // Dark context
      $accordion-styles: (
        accent: pfe-var(ui-accent--on-dark)
      );
    }
    @else if $context == saturated { // Saturated context
      $accordion-styles: (
        accent: pfe-var(ui-accent--on-saturated)
      );
    }

    @if $variant == disclosure {
      $accordion-styles: (
        BorderRightWidth: pfe-var(surface--border-width),
        BorderLeftWidth: pfe-var(surface--border-width),
        BorderColor--accent: pfe-var(surface--border)
      );
    }
  }
  @else { // Expanded state
    // Shared variables for all contexts
    $accordion-styles: (
      BorderColor:         pfe-var(surface--border),
      BorderRightWidth:    pfe-var(surface--border-width),
      BorderLeftWidth:     pfe-var(surface--border-width--heavy),
      // Defaults for light context
      BackgroundColor:     rgba(255, 255, 255, 1),
      Color:               pfe-var(text),
      BorderColor--accent: pfe-local(accent),
      BoxShadow: 0 5px pfe-var(surface--border-width--heavy) rgba(140, 140, 140, 0.35),
      ZIndex: 3
    );

    @if $context == dark { // Dark context
      $accordion-styles: (
        BackgroundColor:    rgba(247, 247, 249, .1),
        Color:               pfe-broadcasted(text),
        BorderColor--accent: pfe-var(ui-accent--on-dark),
        BoxShadow: none
      );
    }
    @else if $context == saturated { // Saturated context
      $accordion-styles: (
        BackgroundColor:    rgba(0, 0, 0, 0.2),
        Color:               pfe-broadcasted(text),
        BorderColor--accent: pfe-var(ui-accent--on-saturated),
        BoxShadow: none
      );
    }
    
    @if $variant == disclosure {
      $accordion-styles: (
        BorderLeftWidth: pfe-var(surface--border-width--heavy),
        BorderColor--accent: pfe-var(ui-accent)
      );
    }
  }

  @return $accordion-styles;
}

@mixin pfe-accordion-props($variant: default) {
  margin: 0;
  width: pfe-local(Width, 100%);
  max-width: 100%;
  height: auto;
  position: relative;

  // Since the default bg color is transparent, look to broadcast values
  background-color: pfe-local(BackgroundColor, transparent);
  color:            pfe-local(Color);

  // Border settings
  border-width: 0;
  border-style: pfe-var(surface--border-style);
  border-color: pfe-local(BorderColor);
  border-top-width:     pfe-local(BorderTopWidth, $fallback: pfe-var(surface--border-width));
  border-right-width:   pfe-local(BorderRightWidth, $fallback: 0);
  border-bottom-width:  pfe-local(BorderBottomWidth, $fallback: pfe-var(surface--border-width));
  border-left-width: pfe-local(BorderLeftWidth, $fallback: pfe-var(surface--border-width--heavy));

  @include browser-query(ie11) {
    border-top-width:     pfe-fetch(surface--border-width);
    border-right-width:   0;
    border-bottom-width:  pfe-fetch(surface--border-width);
    border-left-width:    pfe-fetch(surface--border-width--heavy);
  }

  // Custom border color for the accent mark on the left
  border-left-color: pfe-local(BorderColor--accent);

  box-shadow: pfe-local(BoxShadow);
  z-index: pfe-local(ZIndex);

  &:hover,
  &:focus {
    @include pfe-print-local((
      BorderColor--accent: pfe-local(accent)
    ));

    @include browser-query(ie11) {
      border-left-color: pfe-fetch(ui-accent);
    }
  }
}

//-- Trigger-specific properties
@mixin pfe-trigger {
  $chevron--spacing: 50px;

  $LOCAL-VARIABLES: (
    BorderBottomWidth: 0,
    ZIndex: 3,
    trigger: (
      Padding: pfe-local(Padding, $region: base) $chevron--spacing pfe-local(Padding, $region: base) calc(#{pfe-local(Padding, $region: base)} * 1.5)
    )
  );

  @include pfe-print-local($LOCAL-VARIABLES);
  @include pfe-accordion-props;

  // -webkit-appearance: button;
  cursor: pointer;

  font-family: inherit;
  font-size:   pfe-local(FontSize--header, calc(#{pfe-var(font-size)} * 1.1));
  font-weight: pfe-var(font-weight--bold);
  text-align:  pfe-local(TextAlign, left);
  line-height: pfe-var(line-height);
  padding:     pfe-local(Padding, $region: trigger);

  &:hover {
    outline: none;
    border-left-width: pfe-var(surface--border-width--heavy);
  }

  &:focus {
      outline: none;
      text-decoration: underline;
  }

  &::-moz-focus-inner {
      border: 0;
  }
}

@mixin pfe-trigger-last($context: light) {
  @include pfe-print-local((
    BorderBottomWidth: pfe-var(surface--border-width)
  ));
}

//-- Panel-specific properties
@mixin pfe-panel-variables($context: light) {
  $LOCAL-VARIABLES: (
    accent: pfe-var(ui-accent),
    BorderTopWidth: 0
  );

  @if $context == "light" { // Light context
    $LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (
      BoxShadow: 0 5px pfe-var(surface--border-width--heavy) rgba(140, 140, 140, 0.35)
    ));
  }
  @else {
    $LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (
      BoxShadow: none
    ));
  }

  @include pfe-print-local($LOCAL-VARIABLES);
}

@mixin pfe-panel-container() {
  // Ensure the box shadow does not propagate to nest accordions
  @include pfe-print-local( ( BoxShadow: none ) );

  @extend %container;
  padding: pfe-local(Padding, $region: panel-container);
}

/// ===========================================================================
/// Accordion chevrons
/// ===========================================================================

@mixin pfe-chevron($state: open, $position: after, $size: .4em, $offset: $size, $width: .1em) {
  content: "";
  position: absolute;
  top: calc(#{pfe-var(container-spacer)} + #{$offset});

  display: block;
  border-style: pfe-var(surface--border-style);
  height: $size;
  width:  $size;
  transition: transform 0.15s;
  @if $state == open {
    border-width: $width $width 0 0;
    border-bottom: 0;
    transform: rotate(135deg);
    top: calc(#{pfe-var(container-spacer)} + #{$offset});
    @if $position == before {
      left: calc(#{pfe-var(container-spacer)} * 1.3125); // 21px
      top: calc(#{pfe-var(container-spacer)} + .25em);
      transform: rotate(135deg);
    }
    @else {
      right: calc(#{pfe-var(container-spacer)} * 1.3125);
    }
  }
  @else {
    border-width: 0 $width $width 0;
    transform: rotate(-45deg);
    @if $position == before {
      left: calc(#{pfe-var(container-spacer)} * 1.3125);
      transform: rotate(-45deg);
    }
    @else {
      right: calc(#{pfe-var(container-spacer)} * 1.3125);
    }
  }
}

/// ===========================================================================
/// List styles
/// ===========================================================================

// Mixins and extends can't use the LOCAL-VARIABLES map because we would be
// at risk of overriding an elements map if they call our mixin. We need to
// use just regular sass variables and pfe-local and specify the $fallbacks.
@mixin ordered-list-primary($size: 56px) {
  // First we create our Sass variables that we will use for fallbacks
  // The gap between list items
  $gap: pfe-var(content-spacer);
  // The space between the circle and content
  $spacer: pfe-var(content-spacer);
  // rgb value of the color theme of the circle
  // we need to wrap this in a calc function so it can be dynamic.
  $color: (238, 0, 0);
  // font size of the number inside of the circle
  $number-font-size: $pf-global--FontSize--2xl;

  list-style: none;
  min-height: pfe-local(gap, $fallback: $gap);
  margin: pfe-local(gap, $fallback: $gap);
  padding-left: pfe-local(PaddingLeft, $fallback: 0);

  & > li {
    // increment the local counter variable
    counter-increment: pfe-list;
    position: relative;
    min-height: pfe-local(size, $region: circle, $fallback: $size);
    // the li content will start after the circle and a defined spacer
    padding-left: calc(#{pfe-local(spacer, $fallback: $spacer)} + #{pfe-local(size, $region: circle, $fallback: $size)});
    // the li content needs to align with the middle of the radius but we
    // need to account for the fact that it's also calculating the size
    // of the line height of the number inside of the circle
    padding-top: calc((#{pfe-local(size, $region: circle, $fallback: $size)} / 2) - ((#{pfe-local(FontSize, $region: circle, $fallback: $number-font-size)} / 2)));
  }
  & > ul {
    list-style-type: disc;
  }
  & > li:before {
    @include pfe-typography(2xl, $type: "title");
    // we need to make sure that if the size of the number in the circle changes
    // that doesn't affect the size or shape of the circle. since we don't have
    // any more psuedo elements to work with, we need to use the flexbox technique
    // to center the text.
    display: block;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    // make the circle using border-radius
    border-radius: 50%;
    // keep the circle on the upper left
    position: absolute;
    top: 0;
    left: 0;
    // set the size of the circle
    width: pfe-local(size, $region: circle, $fallback: $size);
    height: pfe-local(size, $region: circle, $fallback: $size);
    // set the contents of the circle
    content: counter(pfe-list);
    font-size: pfe-local(FontSize, $region: circle, $fallback: $number-font-size);
    color: rgba(#{pfe-local(color, $region: circle, $fallback: $color)}, 1);
    // generate a background color based on the circle text color
    // provide an override for BackgroundColor if the user needs to specify
    // custom color.
    background-color: pfe-local(BackgroundColor, $region: circle, $fallback: rgba(pfe-local(color, $region: circle, $fallback: $color), 0.07));
  }

  & > li *:first-child {
    margin-top: pfe-local(MarginTop, $region: item-first-child, $fallback: 0);
  }

  // for pfe-grids we:
  //  - use the pfe-grid API to add grid gap.
  //  - remove the margins on the <li> tags in favor of the grid gap.
  //  - add top and bottom margin back to the <ol> tags to maintain correct offset with surrounding content.
  &.pfe-l-grid.pfe-m-gutters {
    --pfe-grid--gap--vertical: #{pfe-local(gap, $fallback: $gap)};
    --pfe-grid--gap--horizontal: #{pfe-local(gap, $fallback: $gap)};
    --pfe-grid--Margin: #{pfe-local(Margin, $fallback: $gap)};
    --pfe-grid__item--Margin: #{pfe-local(Margin, $region: item, $fallback: 0)};
  }
}
