@use "sass:map";
@use "@patternfly/pfe-sass" as *;

@include configure(
  // QUESTION: should this be 'tab'?
  $name: 'tabs',
  $variables: (
    focus: pfe-var(link),
    panel: ( // to avoid collisions with tab header
      BackgroundColor: transparent,
      Padding: pfe-var(container-spacer),
      PaddingTop: calc(#{pfe-var(container-padding)} * 3),
      PaddingRight: calc(#{pfe-var(container-padding)} * 3),
      PaddingBottom: calc(#{pfe-var(container-padding)} * 3),
      PaddingLeft: calc(#{pfe-var(container-padding)} * 3),
      BorderTop: 0,
      BorderRight: 0,
      BorderBottom: 0,
      BorderLeft: 0,
    ),
  ),
);


/// ===========================================================================

:host {
  display: block;
  color: pfe-broadcasted(text);

  @at-root #{&}(:focus) {
    outline: none;
  }

  [tabindex] {
    display: flex;
    height: 100%;
  }

  .container {
    margin: 0;
    width: 100%;
    background-color: pfe-local(BackgroundColor, $region: panel, $fallback: transparent);
    border-top: pfe-local(BorderTop, $region: panel, $fallback: 0);
    border-right: pfe-local(BorderRight, $region: panel, $fallback: 0);
    border-bottom: pfe-local(BorderBottom, $region: panel, $fallback: 0);
    border-left: pfe-local(BorderLeft, $region: panel, $fallback: 0);
    padding-top: pfe-local(PaddingTop, $region: panel);

    @media screen and (min-width: pfe-breakpoint(xl)) {
      padding-top: pfe-local(PaddingTop, $region: panel);
      padding-right: pfe-local(PaddingRight, $region: panel, $fallback: 0);
      padding-bottom: pfe-local(PaddingBottom, $region: panel, $fallback: 0);
      padding-left: pfe-local(PaddingLeft, $region: panel, $fallback: 0);
    }

    @include pfe-clearfix;
  }
}

:host([hidden]) {
  display: none;
}

/// ===========================================================================
/// HORIZONTAL
/// ===========================================================================
:host([variant="earth"]) {
  background-color: pfe-local(BackgroundColor, $region: panel, $fallback: pfe-var(surface--lightest));

  .container {
    padding-top: pfe-local(PaddingTop, $region: panel);
    padding-right: pfe-local(PaddingRight, $region: panel);
    padding-bottom: pfe-local(PaddingBottom, $region: panel);
    padding-left: pfe-local(PaddingLeft, $region: panel);
  }
}


/// ===========================================================================
/// VERTICAL
/// ===========================================================================

@media screen and (min-width: pfe-breakpoint(md)) {
  :host([variant="wind"][vertical]) {
    .container {
      padding-top: pfe-local(PaddingTop, $region: panel, $fallback: 0);
      padding-bottom: pfe-local(PaddingBottom, $region: panel, $fallback: 0);
      padding-right: pfe-local(PaddingRight, $region: panel, $fallback: 0);
      margin: 0 calc(#{pfe-var(container-spacer)} - 2px);
    }
  }

  :host([variant="earth"][vertical]) {
    border-top: pfe-local(BorderTop, $fallback: 0);
    border-left: pfe-local(BorderLeft, $fallback: pfe-var(ui--border-width) pfe-var(ui--border-style) pfe-var(surface--border));
    height: 100%;
    background-color: pfe-local(BackgroundColor, $region: panel, $fallback: pfe-var(surface--lightest));

    .container {
      padding-left: pfe-local(PaddingLeft, $region: panel);
    }
  }
}

/// ===========================================================================
/// PADDING: EARTH
/// ===========================================================================

:host([variant="earth"]) {
  .container {
    padding-top: pfe-local(PaddingTop, $region: panel);
    padding-right: pfe-local(PaddingRight, $region: panel);
    padding-bottom: pfe-local(PaddingBottom, $region: panel);
    padding-left: pfe-local(PaddingLeft, $region: panel);
  }
}

/// ===========================================================================
/// CONTEXTS: DARK & SATURATED
/// ===========================================================================
/// In dark & saturated contexts, we override the local color vars
:host([on="dark"][variant="earth"]) {
  background-color: pfe-local(BackgroundColor, $region: panel, $fallback: pfe-var(surface--darkest));
  @include pfe-set-broadcast-context(dark);
}

:host([on="saturated"][variant="earth"]) {
  background-color: pfe-local(BackgroundColor, $region: panel, $fallback: pfe-var(surface--lightest));
  @include pfe-set-broadcast-context(light);
}

:host([on="saturated"]:not([variant="earth"])) {
  @include pfe-set-broadcast-context(saturated);
}

:host([on="dark"]:not([variant="earth"])) {
  @include pfe-set-broadcast-context(dark);
}
