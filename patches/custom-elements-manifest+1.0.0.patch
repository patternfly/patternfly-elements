diff --git a/node_modules/custom-elements-manifest/schema.d.ts b/node_modules/custom-elements-manifest/schema.d.ts
index e62323b..f08ce02 100644
--- a/node_modules/custom-elements-manifest/schema.d.ts
+++ b/node_modules/custom-elements-manifest/schema.d.ts
@@ -40,6 +40,12 @@ export interface Package {
    * An array of the modules this package contains.
    */
   modules: Array<Module>;
+
+  /**
+   * Whether the package is deprecated.
+   * If the value is a string, it's the reason for the deprecation.
+   */
+  deprecated?: boolean|string;
 }
 
 // This type may expand in the future to include JSON, CSS, or HTML
@@ -75,6 +81,12 @@ export interface JavaScriptModule {
    * custom element definitions.
    */
   exports?: Array<Export>;
+
+  /**
+   * Whether the module is deprecated.
+   * If the value is a string, it's the reason for the deprecation.
+   */
+  deprecated?: boolean|string;
 }
 
 export type Export = JavaScriptExport | CustomElementExport;
@@ -102,6 +114,12 @@ export interface JavaScriptExport {
    * defined and the `name` field must be `"*"`.
    */
   declaration: Reference;
+
+  /**
+   * Whether the export is deprecated. For example, the name of the export was changed.
+   * If the value is a string, it's the reason for the deprecation.
+   */
+  deprecated?: boolean|string;
 }
 
 /**
@@ -124,6 +142,13 @@ export interface CustomElementExport {
    * custom element.
    */
   declaration: Reference;
+
+  /**
+   * Whether the custom-element export is deprecated.
+   * For example, a future version will not register the custom element in this file.
+   * If the value is a string, it's the reason for the deprecation.
+   */
+  deprecated?: boolean|string;
 }
 
 export type Declaration =
@@ -131,7 +156,8 @@ export type Declaration =
   | FunctionDeclaration
   | MixinDeclaration
   | VariableDeclaration
-  | CustomElementDeclaration;
+  | CustomElementDeclaration
+  | CustomElementMixinDeclaration;
 
 /**
  * A reference to an export of a module.
@@ -173,16 +199,16 @@ export interface SourceReference {
  * neccessarily part of a custom element class, but belong to the definition
  * (often called the "registration") or the `customElements.define()` call.
  *
- * Because classes and tag anmes can only be registered once, there's a
+ * Because classes and tag names can only be registered once, there's a
  * one-to-one relationship between classes and tag names. For ease of use,
  * we allow the tag name here.
  *
  * Some packages define and register custom elements in separate modules. In
  * these cases one `Module` should contain the `CustomElement` without a
  * tagName, and another `Module` should contain the
- * `CustomElement`.
+ * `CustomElementExport`.
  */
-export interface CustomElementDeclaration extends ClassDeclaration {}
+export type CustomElementDeclaration = ClassDeclaration & CustomElement;
 
 /**
  * The additional fields that a custom element adds to classes and mixins.
@@ -223,8 +249,18 @@ export interface CustomElement extends ClassLike {
    * custom element class
    */
   customElement: true;
+
+  members?: Array<CustomElementMember>;
+
+  /**
+   * Whether the custom element is deprecated.
+   * If the value is a string, it's the reason for the deprecation.
+   */
+  deprecated?: boolean|string;
 }
 
+export type CustomElementMember = CustomElementField | ClassMethod;
+
 export interface Attribute {
   name: string;
 
@@ -257,6 +293,12 @@ export interface Attribute {
    * The name of the field this attribute is associated with, if any.
    */
   fieldName?: string;
+
+  /**
+   * Whether the attribute is deprecated.
+   * If the value is a string, it's the reason for the deprecation.
+   */
+  deprecated?: boolean|string;
 }
 
 export interface Event {
@@ -278,6 +320,12 @@ export interface Event {
   type: Type;
 
   inheritedFrom?: Reference;
+
+  /**
+   * Whether the event is deprecated.
+   * If the value is a string, it's the reason for the deprecation.
+   */
+  deprecated?: boolean|string;
 }
 
 export interface Slot {
@@ -295,6 +343,12 @@ export interface Slot {
    * A markdown description.
    */
   description?: string;
+
+  /**
+   * Whether the slot is deprecated.
+   * If the value is a string, it's the reason for the deprecation.
+   */
+  deprecated?: boolean|string;
 }
 
 /**
@@ -312,6 +366,12 @@ export interface CssPart {
    * A markdown description.
    */
   description?: string;
+
+  /**
+   * Whether the CSS shadow part is deprecated.
+   * If the value is a string, it's the reason for the deprecation.
+   */
+  deprecated?: boolean|string;
 }
 
 export interface CssCustomProperty {
@@ -320,6 +380,21 @@ export interface CssCustomProperty {
    */
   name: string;
 
+  /**
+   * The expected syntax of the defined property. Defaults to "*".
+   *
+   * The syntax must be a valid CSS [syntax string](https://developer.mozilla.org/en-US/docs/Web/CSS/@property/syntax)
+   * as defined in the CSS Properties and Values API.
+   *
+   * Examples:
+   *
+   * "<color>": accepts a color
+   * "<length> | <percentage>": accepts lengths or percentages but not calc expressions with a combination of the two
+   * "small | medium | large": accepts one of these values set as custom idents.
+   * "*": any valid token
+   */
+  syntax?: string;
+
   default?: string;
 
   /**
@@ -331,6 +406,12 @@ export interface CssCustomProperty {
    * A markdown description.
    */
   description?: string;
+
+  /**
+   * Whether the CSS custom property is deprecated.
+   * If the value is a string, it's the reason for the deprecation.
+   */
+  deprecated?: boolean|string;
 }
 
 export interface Type {
@@ -351,7 +432,7 @@ export interface Type {
    */
   references?: TypeReference[];
 
-  source? : SourceReference;
+  source?: SourceReference;
 }
 
 /**
@@ -432,7 +513,13 @@ export interface ClassLike {
   mixins?: Array<Reference>;
   members?: Array<ClassMember>;
 
-  source? : SourceReference;
+  source?: SourceReference;
+
+  /**
+   * Whether the class or mixin is deprecated.
+   * If the value is a string, it's the reason for the deprecation.
+   */
+  deprecated?: boolean|string;
 }
 
 export interface ClassDeclaration extends ClassLike {
@@ -461,6 +548,12 @@ export interface PropertyLike {
   type?: Type;
 
   default?: string;
+
+  /**
+   * Whether the property is deprecated.
+   * If the value is a string, it's the reason for the deprecation.
+   */
+  deprecated?: boolean|string;
 }
 
 export interface ClassField extends PropertyLike {
@@ -468,7 +561,24 @@ export interface ClassField extends PropertyLike {
   static?: boolean;
   privacy?: Privacy;
   inheritedFrom?: Reference;
-  source? : SourceReference;
+  source?: SourceReference;
+}
+
+/**
+ * Additional metadata for fields on custom elements.
+ */
+export interface CustomElementField extends ClassField {
+  /**
+   * The corresponding attribute name if there is one.
+   */
+  attribute?: string;
+
+  /**
+   * If the property reflects to an attribute.
+   *
+   * If this is true, `attribute` must be defined.
+   */
+  reflects?: boolean;
 }
 
 export interface ClassMethod extends FunctionLike {
@@ -476,7 +586,7 @@ export interface ClassMethod extends FunctionLike {
   static?: boolean;
   privacy?: Privacy;
   inheritedFrom?: Reference;
-  source? : SourceReference;
+  source?: SourceReference;
 }
 
 /**
@@ -531,18 +641,23 @@ export interface ClassMethod extends FunctionLike {
  * }
  * ```
  */
-export interface MixinDeclaration extends CustomElement, FunctionLike {
+export interface MixinDeclaration extends ClassLike, FunctionLike {
   kind: 'mixin';
 }
 
+/**
+ * A class mixin that also adds custom element related properties.
+ */
+export type CustomElementMixinDeclaration = MixinDeclaration & CustomElement;
+
 export interface VariableDeclaration extends PropertyLike {
   kind: 'variable';
-  source? : SourceReference;
+  source?: SourceReference;
 }
 
 export interface FunctionDeclaration extends FunctionLike {
   kind: 'function';
-  source? : SourceReference;
+  source?: SourceReference;
 }
 
 export interface Parameter extends PropertyLike {
@@ -550,6 +665,11 @@ export interface Parameter extends PropertyLike {
    * Whether the parameter is optional. Undefined implies non-optional.
    */
   optional?: boolean;
+  /**
+   * Whether the parameter is a rest parameter. Only the last parameter may be a rest parameter.
+   * Undefined implies single parameter.
+   */
+  rest?: boolean;
 }
 
 export interface FunctionLike {
@@ -565,6 +685,12 @@ export interface FunctionLike {
    */
   description?: string;
 
+  /**
+   * Whether the function is deprecated.
+   * If the value is a string, it's the reason for the deprecation.
+   */
+  deprecated?: boolean|string;
+
   parameters?: Parameter[];
 
   return?: {
@@ -587,5 +713,5 @@ export interface Demo {
    */
   url: string;
 
-  source? : SourceReference;
+  source?: SourceReference;
 }
